/**
 * DOSA管理API
 * RESTful API of DOSA管理システム
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    mail_address?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {Array<Participant>}
     * @memberof InlineResponse200
     */
    data?: Array<Participant>;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {Array<ParticipantMeasurementMeet>}
     * @memberof InlineResponse2001
     */
    data?: Array<ParticipantMeasurementMeet>;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {Measurement}
     * @memberof InlineResponse2002
     */
    data?: Measurement;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {Array<MeasurementMeet>}
     * @memberof InlineResponse2003
     */
    data?: Array<MeasurementMeet>;
}
/**
 *
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * リクエストID
     * @type {number}
     * @memberof InlineResponse201
     */
    request_id?: number;
}
/**
 * 測定結果詳細
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     * 測定者ID
     * @type {number}
     * @memberof Measurement
     */
    participant_id: number;
    /**
     * 測定会ID
     * @type {number}
     * @memberof Measurement
     */
    meet_id: number;
    /**
     * 測定結果ID
     * @type {number}
     * @memberof Measurement
     */
    measurement_id: number;
    /**
     * 測定会名
     * @type {string}
     * @memberof Measurement
     */
    meet_name: string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof Measurement
     */
    start_date: string;
    /**
     * 名前
     * @type {string}
     * @memberof Measurement
     */
    name: string;
    /**
     * 性別（1:男性, 2:女性）
     * @type {number}
     * @memberof Measurement
     */
    sex: MeasurementSexEnum;
    /**
     * 学年
     * @type {string}
     * @memberof Measurement
     */
    grade: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof Measurement
     */
    birthday: string;
    /**
     * 参加回数
     * @type {number}
     * @memberof Measurement
     */
    participate_time: number;
    /**
     * 身長(cm)
     * @type {number}
     * @memberof Measurement
     */
    height: number;
    /**
     * 体重(kg)
     * @type {number}
     * @memberof Measurement
     */
    weight: number;
    /**
     * 習ったスポーツ
     * @type {Array<string>}
     * @memberof Measurement
     */
    sports_type: Array<string>;
    /**
     * その他の習ったスポーツ
     * @type {string}
     * @memberof Measurement
     */
    sports_type_other: string;
    /**
     * 所属チーム名
     * @type {string}
     * @memberof Measurement
     */
    team_name: string;
    /**
     * バージョン
     * @type {number}
     * @memberof Measurement
     */
    version: number;
    /**
     *
     * @type {MeasurementResults}
     * @memberof Measurement
     */
    results: MeasurementResults;
    /**
     *
     * @type {MeasurementAdvice}
     * @memberof Measurement
     */
    advice: MeasurementAdvice;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MeasurementSexEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * アドバイス
 * @export
 * @interface MeasurementAdvice
 */
export interface MeasurementAdvice {
    /**
     * 概要
     * @type {string}
     * @memberof MeasurementAdvice
     */
    summary: string;
    /**
     * 向いているスポーツ
     * @type {Array<string>}
     * @memberof MeasurementAdvice
     */
    recommend_sports: Array<string>;
    /**
     * 活かせる能力（上位3つ）
     * @type {Array<MeasurementAdviceRecommendAbility>}
     * @memberof MeasurementAdvice
     */
    recommend_ability: Array<MeasurementAdviceRecommendAbility>;
}
/**
 * 活かせる能力
 * @export
 * @interface MeasurementAdviceRecommendAbility
 */
export interface MeasurementAdviceRecommendAbility {
    /**
     * 能力
     * @type {string}
     * @memberof MeasurementAdviceRecommendAbility
     */
    ability: string;
    /**
     * スポーツ
     * @type {string}
     * @memberof MeasurementAdviceRecommendAbility
     */
    sports: string;
}
/**
 * 能力測定データ
 * @export
 * @interface MeasurementData
 */
export interface MeasurementData {
    /**
     * 5段階評価
     * @type {number}
     * @memberof MeasurementData
     */
    grade: MeasurementDataGradeEnum;
    /**
     * 測定値
     * @type {number}
     * @memberof MeasurementData
     */
    score: number;
    /**
     * 全国ランキング
     * @type {number}
     * @memberof MeasurementData
     */
    rank: number;
    /**
     * 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @type {number}
     * @memberof MeasurementData
     */
    rank_range: MeasurementDataRankRangeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MeasurementDataGradeEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5
}
/**
    * @export
    * @enum {string}
    */
export declare enum MeasurementDataRankRangeEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}
/**
 * 申込受付中測定会
 * @export
 * @interface MeasurementMeet
 */
export interface MeasurementMeet {
    /**
     * 測定会ID
     * @type {number}
     * @memberof MeasurementMeet
     */
    meet_id: number;
    /**
     * 測定会名
     * @type {string}
     * @memberof MeasurementMeet
     */
    meet_name: string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof MeasurementMeet
     */
    start_date: string;
    /**
     * 開始時間
     * @type {Array<string>}
     * @memberof MeasurementMeet
     */
    start_time: Array<string>;
    /**
     * 測定会ステータス（1: 募集受付中, 2: 募集終了）
     * @type {number}
     * @memberof MeasurementMeet
     */
    status: MeasurementMeetStatusEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MeasurementMeetStatusEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * 申込受付中測定会
 * @export
 * @interface MeasurementMeetRequest
 */
export interface MeasurementMeetRequest {
    /**
     * リクエストID
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    request_id: number;
    /**
     * 測定会ID
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    meet_id: number;
    /**
     * 測定者ID
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    participant_id: number;
    /**
     * 第1希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    first_hope_time: string;
    /**
     * 第2希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    second_hope_time: string;
    /**
     * 第3希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    third_hope_time: string;
    /**
     * 当落選結果（1: 当選, 2: 落選）
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    is_win: MeasurementMeetRequestIsWinEnum;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    start_time: string;
    /**
     * ステータス（1: 未応募, 2: 応募済み）
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    status: MeasurementMeetRequestStatusEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MeasurementMeetRequestIsWinEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum MeasurementMeetRequestStatusEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * 測定会申込み
 * @export
 * @interface MeasurementMeetRequestData
 */
export interface MeasurementMeetRequestData {
    /**
     * 名前
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    name: string;
    /**
     * 名前（カナ）
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    name_kana: string;
    /**
     * 性別（1:男性, 2:女性）
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    sex: MeasurementMeetRequestDataSexEnum;
    /**
     * 郵便番号1
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    zip_code1: string;
    /**
     * 郵便番号2
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    zip_code2: string;
    /**
     * 住所
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    address: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    telephone: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    mail_address: string;
    /**
     * 保護者氏名
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    parent_name: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    birthday: string;
    /**
     * 希望測定開始時間1
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    first_hope_time: string;
    /**
     * 希望測定開始時間2
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    second_hope_time: string;
    /**
     * 希望測定開始時間3
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    third_hope_time: string;
    /**
     * 習ったスポーツ
     * @type {Array<string>}
     * @memberof MeasurementMeetRequestData
     */
    sports_type: Array<string>;
    /**
     * その他の習ったスポーツ
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    sports_type_other: string;
    /**
     * 学校名
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    school_name: string;
    /**
     * 所属チーム
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    team_name: string;
    /**
     * 身長(cm)
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    height: number;
    /**
     * 体重(kg)
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    weight: number;
    /**
     * 参加回数
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    participate_time: number;
    /**
     * 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    endurance_long_self: MeasurementMeetRequestDataEnduranceLongSelfEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum MeasurementMeetRequestDataSexEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum MeasurementMeetRequestDataEnduranceLongSelfEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5
}
/**
 * 測定結果
 * @export
 * @interface MeasurementResults
 */
export interface MeasurementResults {
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    dash_10?: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    endurance_long?: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    endurance_short?: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    jump: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    agility: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    step_visual_response?: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    step_power?: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    swing_speed?: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    balance_l?: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    balance_r?: MeasurementData;
    /**
     *
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    balance_lr_difference?: MeasurementData;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    messages: string;
}
/**
 * 測定者
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * 測定者ID
     * @type {number}
     * @memberof Participant
     */
    participant_id: number;
    /**
     * 氏名
     * @type {string}
     * @memberof Participant
     */
    name: string;
    /**
     * 氏名（カナ）
     * @type {string}
     * @memberof Participant
     */
    name_kana: string;
    /**
     * 性別（1:男性, 2:女性）
     * @type {number}
     * @memberof Participant
     */
    sex: ParticipantSexEnum;
    /**
     * 生年月日
     * @type {string}
     * @memberof Participant
     */
    birthday: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Participant
     */
    mail_address: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ParticipantSexEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * 参加測定会
 * @export
 * @interface ParticipantMeasurementMeet
 */
export interface ParticipantMeasurementMeet {
    /**
     * 測定者ID
     * @type {number}
     * @memberof ParticipantMeasurementMeet
     */
    participant_id: number;
    /**
     * 測定会ID
     * @type {number}
     * @memberof ParticipantMeasurementMeet
     */
    meet_id: number;
    /**
     * 測定結果ID
     * @type {number}
     * @memberof ParticipantMeasurementMeet
     */
    measurement_id: number;
    /**
     * 測定会名
     * @type {string}
     * @memberof ParticipantMeasurementMeet
     */
    meet_name: string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof ParticipantMeasurementMeet
     */
    start_date: string;
    /**
     * 開始時間
     * @type {string}
     * @memberof ParticipantMeasurementMeet
     */
    start_time: string;
}
/**
 *
 * @export
 * @interface Ranking
 */
export interface Ranking {
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    dash_10: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    endurance_long: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    endurance_short: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    jump: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    agility: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    step_visual_response: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    step_power: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    swing_speed: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    balance_l: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    balance_r: Array<RankingData>;
    /**
     *
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    balance_lr_difference: Array<RankingData>;
}
/**
 *
 * @export
 * @interface RankingData
 */
export interface RankingData {
    /**
     * 測定者名
     * @type {string}
     * @memberof RankingData
     */
    name: string;
    /**
     * 性別（1:男性, 2:女性）
     * @type {number}
     * @memberof RankingData
     */
    sex: RankingDataSexEnum;
    /**
     * 生年月日
     * @type {string}
     * @memberof RankingData
     */
    birthday: string;
    /**
     * 測定値
     * @type {number}
     * @memberof RankingData
     */
    score: number;
    /**
     * 全国ランキング
     * @type {number}
     * @memberof RankingData
     */
    rank: number;
    /**
     * 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @type {number}
     * @memberof RankingData
     */
    rank_range: RankingDataRankRangeEnum;
    /**
     * 測定会名
     * @type {string}
     * @memberof RankingData
     */
    meet_name: string;
    /**
     * 測定者ID
     * @type {number}
     * @memberof RankingData
     */
    participant_id: number;
    /**
     * 測定会ID
     * @type {number}
     * @memberof RankingData
     */
    meet_id: number;
    /**
     * 測定結果ID
     * @type {number}
     * @memberof RankingData
     */
    measurement_id: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum RankingDataSexEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
    * @export
    * @enum {string}
    */
export declare enum RankingDataRankRangeEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}
/**
 * DosaAdminApi - axios parameter creator
 * @export
 */
export declare const DosaAdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary 測定結果取得
     * @param {number} participant_id 測定者ID
     * @param {number} meet_id 測定会ID
     * @param {number} measurement_id 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurement(participant_id: number, meet_id: number, measurement_id: number, options?: any): RequestArgs;
    /**
     *
     * @summary 測定会取得
     * @param {number} meet_id 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeet(meet_id: number, options?: any): RequestArgs;
    /**
     *
     * @summary 申込み測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {number} [meet_id] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeetRequest(participant_id: number, meet_id?: number, options?: any): RequestArgs;
    /**
     *
     * @summary 測定会一覧取得
     * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeets(status?: 2 | 1, options?: any): RequestArgs;
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} [mail_address] メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipants(mail_address?: string, options?: any): RequestArgs;
    /**
     *
     * @summary 参加測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipatedMeasurementMeets(participant_id: number, options?: any): RequestArgs;
    /**
     *
     * @summary ランキング一覧取得
     * @param {1 | 2 | 3 | 4} [rank_range] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRankings(rank_range?: 2 | 4 | 3 | 1, sex?: 2 | 1, options?: any): RequestArgs;
    /**
     *
     * @summary 測定会申込み
     * @param {number} meet_id 測定会ID
     * @param {MeasurementMeetRequestData} [MeasurementMeetRequestData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMeasurementMeet(meet_id: number, MeasurementMeetRequestData?: MeasurementMeetRequestData, options?: any): RequestArgs;
    /**
     *
     * @summary テストメール送信
     * @param {InlineObject} [InlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSendTestMail(InlineObject?: InlineObject, options?: any): RequestArgs;
};
/**
 * DosaAdminApi - functional programming interface
 * @export
 */
export declare const DosaAdminApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary 測定結果取得
     * @param {number} participant_id 測定者ID
     * @param {number} meet_id 測定会ID
     * @param {number} measurement_id 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurement(participant_id: number, meet_id: number, measurement_id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary 測定会取得
     * @param {number} meet_id 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeet(meet_id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeasurementMeet>;
    /**
     *
     * @summary 申込み測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {number} [meet_id] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeetRequest(participant_id: number, meet_id?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeasurementMeetRequest>;
    /**
     *
     * @summary 測定会一覧取得
     * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeets(status?: 2 | 1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>;
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} [mail_address] メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipants(mail_address?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>;
    /**
     *
     * @summary 参加測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipatedMeasurementMeets(participant_id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary ランキング一覧取得
     * @param {1 | 2 | 3 | 4} [rank_range] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRankings(rank_range?: 2 | 4 | 3 | 1, sex?: 2 | 1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ranking>;
    /**
     *
     * @summary 測定会申込み
     * @param {number} meet_id 測定会ID
     * @param {MeasurementMeetRequestData} [MeasurementMeetRequestData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMeasurementMeet(meet_id: number, MeasurementMeetRequestData?: MeasurementMeetRequestData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>;
    /**
     *
     * @summary テストメール送信
     * @param {InlineObject} [InlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSendTestMail(InlineObject?: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * DosaAdminApi - factory interface
 * @export
 */
export declare const DosaAdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary 測定結果取得
     * @param {number} participant_id 測定者ID
     * @param {number} meet_id 測定会ID
     * @param {number} measurement_id 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurement(participant_id: number, meet_id: number, measurement_id: number, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary 測定会取得
     * @param {number} meet_id 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeet(meet_id: number, options?: any): AxiosPromise<MeasurementMeet>;
    /**
     *
     * @summary 申込み測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {number} [meet_id] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeetRequest(participant_id: number, meet_id?: number, options?: any): AxiosPromise<MeasurementMeetRequest>;
    /**
     *
     * @summary 測定会一覧取得
     * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeets(status?: 2 | 1, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} [mail_address] メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipants(mail_address?: string, options?: any): AxiosPromise<InlineResponse200>;
    /**
     *
     * @summary 参加測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipatedMeasurementMeets(participant_id: number, options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary ランキング一覧取得
     * @param {1 | 2 | 3 | 4} [rank_range] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRankings(rank_range?: 2 | 4 | 3 | 1, sex?: 2 | 1, options?: any): AxiosPromise<Ranking>;
    /**
     *
     * @summary 測定会申込み
     * @param {number} meet_id 測定会ID
     * @param {MeasurementMeetRequestData} [MeasurementMeetRequestData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMeasurementMeet(meet_id: number, MeasurementMeetRequestData?: MeasurementMeetRequestData, options?: any): AxiosPromise<InlineResponse201>;
    /**
     *
     * @summary テストメール送信
     * @param {InlineObject} [InlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSendTestMail(InlineObject?: InlineObject, options?: any): AxiosPromise<void>;
};
/**
 * DosaAdminApi - object-oriented interface
 * @export
 * @class DosaAdminApi
 * @extends {BaseAPI}
 */
export declare class DosaAdminApi extends BaseAPI {
    /**
     *
     * @summary 測定結果取得
     * @param {number} participant_id 測定者ID
     * @param {number} meet_id 測定会ID
     * @param {number} measurement_id 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurement(participant_id: number, meet_id: number, measurement_id: number, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary 測定会取得
     * @param {number} meet_id 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementMeet(meet_id: number, options?: any): AxiosPromise<MeasurementMeet>;
    /**
     *
     * @summary 申込み測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {number} [meet_id] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementMeetRequest(participant_id: number, meet_id?: number, options?: any): AxiosPromise<MeasurementMeetRequest>;
    /**
     *
     * @summary 測定会一覧取得
     * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementMeets(status?: 1 | 2, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} [mail_address] メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getParticipants(mail_address?: string, options?: any): AxiosPromise<InlineResponse200>;
    /**
     *
     * @summary 参加測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getParticipatedMeasurementMeets(participant_id: number, options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary ランキング一覧取得
     * @param {1 | 2 | 3 | 4} [rank_range] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getRankings(rank_range?: 1 | 2 | 3 | 4, sex?: 1 | 2, options?: any): AxiosPromise<Ranking>;
    /**
     *
     * @summary 測定会申込み
     * @param {number} meet_id 測定会ID
     * @param {MeasurementMeetRequestData} [MeasurementMeetRequestData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    postMeasurementMeet(meet_id: number, MeasurementMeetRequestData?: MeasurementMeetRequestData, options?: any): AxiosPromise<InlineResponse201>;
    /**
     *
     * @summary テストメール送信
     * @param {InlineObject} [InlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    postSendTestMail(InlineObject?: InlineObject, options?: any): AxiosPromise<void>;
}
