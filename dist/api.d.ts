/**
 * DOSA管理API
 * DOSA管理API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface GetMeasurement200Response
 */
export interface GetMeasurement200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof GetMeasurement200Response
     */
    'status': GetMeasurement200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof GetMeasurement200Response
     */
    'message': string;
    /**
     * データ
     * @type {Array<GetMeasurement200ResponseDataInner>}
     * @memberof GetMeasurement200Response
     */
    'data': Array<GetMeasurement200ResponseDataInner>;
}
export declare const GetMeasurement200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _404: "404";
};
export declare type GetMeasurement200ResponseStatusEnum = typeof GetMeasurement200ResponseStatusEnum[keyof typeof GetMeasurement200ResponseStatusEnum];
/**
 * 測定会情報取得
 * @export
 * @interface GetMeasurement200ResponseDataInner
 */
export interface GetMeasurement200ResponseDataInner {
    /**
     * 測定者ID
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'PARTICIPANT_ID': string;
    /**
     * 測定会ID
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'MEET_ID': string;
    /**
     * 測定会名
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'MEET_NAME': string;
    /**
     * 測定結果ID
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'MEASUREMENT_ID': string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'STARTDATE': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'STARTTIME': string;
    /**
     * 当落状況（1:当選, 2:落選）
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'IS_WIN': GetMeasurement200ResponseDataInnerISWINEnum;
    /**
     * ステータス（1:受付中, 2:受付終了）
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'STATUS': GetMeasurement200ResponseDataInnerSTATUSEnum;
    /**
     * ラベル出力（0:未ラベル出力, 1:ラベル出力済み）
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'IS_LABEL_OUTPUT': GetMeasurement200ResponseDataInnerISLABELOUTPUTEnum;
    /**
     * メール配信ステータス（0:未配信, 1:配信済み）
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'IS_SENDMAIL': GetMeasurement200ResponseDataInnerISSENDMAILEnum;
    /**
     * 参加状況（0:不参加, 1:参加）
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'IS_MEASUREMENT': GetMeasurement200ResponseDataInnerISMEASUREMENTEnum;
    /**
     * 測定会詳細PDF
     * @type {string}
     * @memberof GetMeasurement200ResponseDataInner
     */
    'MEET_PDF_URL': string;
}
export declare const GetMeasurement200ResponseDataInnerISWINEnum: {
    readonly _1: "1";
    readonly _2: "2";
};
export declare type GetMeasurement200ResponseDataInnerISWINEnum = typeof GetMeasurement200ResponseDataInnerISWINEnum[keyof typeof GetMeasurement200ResponseDataInnerISWINEnum];
export declare const GetMeasurement200ResponseDataInnerSTATUSEnum: {
    readonly _1: "1";
    readonly _2: "2";
};
export declare type GetMeasurement200ResponseDataInnerSTATUSEnum = typeof GetMeasurement200ResponseDataInnerSTATUSEnum[keyof typeof GetMeasurement200ResponseDataInnerSTATUSEnum];
export declare const GetMeasurement200ResponseDataInnerISLABELOUTPUTEnum: {
    readonly _1: "1";
    readonly _2: "2";
};
export declare type GetMeasurement200ResponseDataInnerISLABELOUTPUTEnum = typeof GetMeasurement200ResponseDataInnerISLABELOUTPUTEnum[keyof typeof GetMeasurement200ResponseDataInnerISLABELOUTPUTEnum];
export declare const GetMeasurement200ResponseDataInnerISSENDMAILEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type GetMeasurement200ResponseDataInnerISSENDMAILEnum = typeof GetMeasurement200ResponseDataInnerISSENDMAILEnum[keyof typeof GetMeasurement200ResponseDataInnerISSENDMAILEnum];
export declare const GetMeasurement200ResponseDataInnerISMEASUREMENTEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type GetMeasurement200ResponseDataInnerISMEASUREMENTEnum = typeof GetMeasurement200ResponseDataInnerISMEASUREMENTEnum[keyof typeof GetMeasurement200ResponseDataInnerISMEASUREMENTEnum];
/**
 *
 * @export
 * @interface GetMeasurementList200Response
 */
export interface GetMeasurementList200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof GetMeasurementList200Response
     */
    'status': GetMeasurementList200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof GetMeasurementList200Response
     */
    'message': string;
    /**
     *
     * @type {Array<GetMeasurementList200ResponseDataInner>}
     * @memberof GetMeasurementList200Response
     */
    'data': Array<GetMeasurementList200ResponseDataInner>;
}
export declare const GetMeasurementList200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _404: "404";
};
export declare type GetMeasurementList200ResponseStatusEnum = typeof GetMeasurementList200ResponseStatusEnum[keyof typeof GetMeasurementList200ResponseStatusEnum];
/**
 * 申込受付中測定会
 * @export
 * @interface GetMeasurementList200ResponseDataInner
 */
export interface GetMeasurementList200ResponseDataInner {
    /**
     * 測定会ID
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'MEET_ID': string;
    /**
     * 測定会名
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'MEET_NAME': string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTDATE': string;
    /**
     * 開始時間1
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME01': string;
    /**
     * 開始時間2
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME02': string;
    /**
     * 開始時間3
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME03': string;
    /**
     * 開始時間4
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME04': string;
    /**
     * 開始時間5
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME05': string;
    /**
     * 開始時間6
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME06': string;
    /**
     * 開始時間7
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME07': string;
    /**
     * 開始時間8
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME08': string;
    /**
     * 開始時間9
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME09': string;
    /**
     * 開始時間10
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME10': string;
    /**
     * 開始時間11
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME11': string;
    /**
     * 開始時間12
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME12': string;
    /**
     * 開始時間13
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME13': string;
    /**
     * 開始時間14
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME14': string;
    /**
     * 開始時間15
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STARTTIME15': string;
    /**
     * 測定会ステータス（1=受付中 2=受付終了 0=だと両方 3=だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし）
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'STATUS': GetMeasurementList200ResponseDataInnerSTATUSEnum;
    /**
     * メール配信ステータス（1=メール配信済み 0=メール配信前）
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'IS_SENDMAIL': GetMeasurementList200ResponseDataInnerISSENDMAILEnum;
    /**
     * ラベル印刷ステータス（0=未ラベル出力 1=ラベル出力済み）
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'IS_LABEL_OUTPUT': GetMeasurementList200ResponseDataInnerISLABELOUTPUTEnum;
    /**
     * 測定会詳細PDF
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'MEET_PDF_URL': string;
    /**
     * 測定会公開日
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'OPEN_DATE': string;
    /**
     * 参加対象
     * @type {string}
     * @memberof GetMeasurementList200ResponseDataInner
     */
    'REGISTRATION': string;
}
export declare const GetMeasurementList200ResponseDataInnerSTATUSEnum: {
    readonly _0: "0";
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export declare type GetMeasurementList200ResponseDataInnerSTATUSEnum = typeof GetMeasurementList200ResponseDataInnerSTATUSEnum[keyof typeof GetMeasurementList200ResponseDataInnerSTATUSEnum];
export declare const GetMeasurementList200ResponseDataInnerISSENDMAILEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type GetMeasurementList200ResponseDataInnerISSENDMAILEnum = typeof GetMeasurementList200ResponseDataInnerISSENDMAILEnum[keyof typeof GetMeasurementList200ResponseDataInnerISSENDMAILEnum];
export declare const GetMeasurementList200ResponseDataInnerISLABELOUTPUTEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type GetMeasurementList200ResponseDataInnerISLABELOUTPUTEnum = typeof GetMeasurementList200ResponseDataInnerISLABELOUTPUTEnum[keyof typeof GetMeasurementList200ResponseDataInnerISLABELOUTPUTEnum];
/**
 *
 * @export
 * @interface GetMeasurementMeetRequest200Response
 */
export interface GetMeasurementMeetRequest200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof GetMeasurementMeetRequest200Response
     */
    'status': GetMeasurementMeetRequest200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof GetMeasurementMeetRequest200Response
     */
    'message': string;
    /**
     *
     * @type {Array<GetMeasurementMeetRequest200ResponseDataInner>}
     * @memberof GetMeasurementMeetRequest200Response
     */
    'data': Array<GetMeasurementMeetRequest200ResponseDataInner>;
}
export declare const GetMeasurementMeetRequest200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _404: "404";
};
export declare type GetMeasurementMeetRequest200ResponseStatusEnum = typeof GetMeasurementMeetRequest200ResponseStatusEnum[keyof typeof GetMeasurementMeetRequest200ResponseStatusEnum];
/**
 * 申込受付中測定会
 * @export
 * @interface GetMeasurementMeetRequest200ResponseDataInner
 */
export interface GetMeasurementMeetRequest200ResponseDataInner {
    /**
     * リクエストID
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'REQUEST_ID': string;
    /**
     * 測定会ID
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'MEET_ID': string;
    /**
     * 測定者ID
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'PARTICIPANT_ID': string;
    /**
     * 開始日
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'STARTDATE': string;
    /**
     * 第1希望時間
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'FIRST_HOPE_TIME': string;
    /**
     * 第2希望時間
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'SECOND_HOPE_TIME': string;
    /**
     * 第3希望時間
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'THIRD_HOPE_TIME': string;
    /**
     * 当落選結果（0: 落選, 1: 当選, NULL/空欄: 未定）
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'IS_WIN': GetMeasurementMeetRequest200ResponseDataInnerISWINEnum;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'STARTTIME': string;
    /**
     * ステータス（0: 削除, 1: 受付中, 2: 受付終了）
     * @type {string}
     * @memberof GetMeasurementMeetRequest200ResponseDataInner
     */
    'STATUS': GetMeasurementMeetRequest200ResponseDataInnerSTATUSEnum;
}
export declare const GetMeasurementMeetRequest200ResponseDataInnerISWINEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly Empty: "";
};
export declare type GetMeasurementMeetRequest200ResponseDataInnerISWINEnum = typeof GetMeasurementMeetRequest200ResponseDataInnerISWINEnum[keyof typeof GetMeasurementMeetRequest200ResponseDataInnerISWINEnum];
export declare const GetMeasurementMeetRequest200ResponseDataInnerSTATUSEnum: {
    readonly _0: "0";
    readonly _1: "1";
    readonly _2: "2";
};
export declare type GetMeasurementMeetRequest200ResponseDataInnerSTATUSEnum = typeof GetMeasurementMeetRequest200ResponseDataInnerSTATUSEnum[keyof typeof GetMeasurementMeetRequest200ResponseDataInnerSTATUSEnum];
/**
 *
 * @export
 * @interface GetMeasurementSingle200Response
 */
export interface GetMeasurementSingle200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof GetMeasurementSingle200Response
     */
    'status': GetMeasurementSingle200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof GetMeasurementSingle200Response
     */
    'message': string;
    /**
     *
     * @type {GetMeasurementSingle200ResponseData}
     * @memberof GetMeasurementSingle200Response
     */
    'data': GetMeasurementSingle200ResponseData;
}
export declare const GetMeasurementSingle200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _404: "404";
};
export declare type GetMeasurementSingle200ResponseStatusEnum = typeof GetMeasurementSingle200ResponseStatusEnum[keyof typeof GetMeasurementSingle200ResponseStatusEnum];
/**
 *
 * @export
 * @interface GetMeasurementSingle200ResponseData
 */
export interface GetMeasurementSingle200ResponseData {
    /**
     * 測定会ID
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'MEET_ID': string;
    /**
     * 測定会名
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'MEET_NAME': string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTDATE': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME01': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME02': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME03': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME04': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME05': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME06': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME07': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME08': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME09': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME10': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME11': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME12': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME13': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME14': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STARTTIME15': string;
    /**
     * 測定会ステータス（1=受付中 2=受付終了 0=だと両方 3=だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし）
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'STATUS': GetMeasurementSingle200ResponseDataSTATUSEnum;
    /**
     * メール配信ステータス（1=メール配信済み 0=メール配信前）
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'IS_SENDMAIL': GetMeasurementSingle200ResponseDataISSENDMAILEnum;
    /**
     * 当落通知メール予定日
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'SENDMAIL_INFODATE': string;
    /**
     * ラベル印刷ステータス（1=ラベル印刷済み 0=ラベル印刷前）
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'IS_LABEL_OUTPUT': GetMeasurementSingle200ResponseDataISLABELOUTPUTEnum;
    /**
     * 測定会詳細PDF
     * @type {string}
     * @memberof GetMeasurementSingle200ResponseData
     */
    'MEET_PDF_URL': string;
}
export declare const GetMeasurementSingle200ResponseDataSTATUSEnum: {
    readonly _0: "0";
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export declare type GetMeasurementSingle200ResponseDataSTATUSEnum = typeof GetMeasurementSingle200ResponseDataSTATUSEnum[keyof typeof GetMeasurementSingle200ResponseDataSTATUSEnum];
export declare const GetMeasurementSingle200ResponseDataISSENDMAILEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type GetMeasurementSingle200ResponseDataISSENDMAILEnum = typeof GetMeasurementSingle200ResponseDataISSENDMAILEnum[keyof typeof GetMeasurementSingle200ResponseDataISSENDMAILEnum];
export declare const GetMeasurementSingle200ResponseDataISLABELOUTPUTEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type GetMeasurementSingle200ResponseDataISLABELOUTPUTEnum = typeof GetMeasurementSingle200ResponseDataISLABELOUTPUTEnum[keyof typeof GetMeasurementSingle200ResponseDataISLABELOUTPUTEnum];
/**
 *
 * @export
 * @interface GetParticipants200Response
 */
export interface GetParticipants200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof GetParticipants200Response
     */
    'status': GetParticipants200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof GetParticipants200Response
     */
    'message': string;
    /**
     * データ
     * @type {Array<GetParticipants200ResponseDataInner>}
     * @memberof GetParticipants200Response
     */
    'data': Array<GetParticipants200ResponseDataInner>;
}
export declare const GetParticipants200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _404: "404";
};
export declare type GetParticipants200ResponseStatusEnum = typeof GetParticipants200ResponseStatusEnum[keyof typeof GetParticipants200ResponseStatusEnum];
/**
 * 測定者
 * @export
 * @interface GetParticipants200ResponseDataInner
 */
export interface GetParticipants200ResponseDataInner {
    /**
     * 測定者ID
     * @type {string}
     * @memberof GetParticipants200ResponseDataInner
     */
    'PARTICIPANT_ID': string;
    /**
     * 氏名
     * @type {string}
     * @memberof GetParticipants200ResponseDataInner
     */
    'NAME': string;
    /**
     * 氏名（カナ）
     * @type {string}
     * @memberof GetParticipants200ResponseDataInner
     */
    'NAME_KANA': string;
    /**
     * 性別
     * @type {string}
     * @memberof GetParticipants200ResponseDataInner
     */
    'SEX': GetParticipants200ResponseDataInnerSEXEnum;
    /**
     * 生年月日
     * @type {string}
     * @memberof GetParticipants200ResponseDataInner
     */
    'BIRTHDAY': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof GetParticipants200ResponseDataInner
     */
    'MAIL_ADDRESS': string;
}
export declare const GetParticipants200ResponseDataInnerSEXEnum: {
    readonly 男性: "男性";
    readonly 女性: "女性";
};
export declare type GetParticipants200ResponseDataInnerSEXEnum = typeof GetParticipants200ResponseDataInnerSEXEnum[keyof typeof GetParticipants200ResponseDataInnerSEXEnum];
/**
 *
 * @export
 * @interface GetRanking200Response
 */
export interface GetRanking200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof GetRanking200Response
     */
    'status': GetRanking200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof GetRanking200Response
     */
    'message': string;
    /**
     * ランキングデータ
     * @type {Array<GetRanking200ResponseDataInner>}
     * @memberof GetRanking200Response
     */
    'data': Array<GetRanking200ResponseDataInner>;
}
export declare const GetRanking200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _404: "404";
};
export declare type GetRanking200ResponseStatusEnum = typeof GetRanking200ResponseStatusEnum[keyof typeof GetRanking200ResponseStatusEnum];
/**
 *
 * @export
 * @interface GetRanking200ResponseDataInner
 */
export interface GetRanking200ResponseDataInner {
    /**
     * 測定者ID
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'PARTICIPANT_ID': string;
    /**
     * 測定者名
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'NAME': string;
    /**
     * 性別
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'SEX': GetRanking200ResponseDataInnerSEXEnum;
    /**
     * 測定会名
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'MEET_NAME': string;
    /**
     * 誕生日
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'BIRTHDAY': string;
    /**
     * 測定会ID
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'MEET_ID': string;
    /**
     * 測定結果ID
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'MEASUREMENT_ID': string;
    /**
     * 10mスプリント
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'DASH_10': string;
    /**
     * ジャンプ力
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'JUMP': string;
    /**
     * 敏しょう性
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'AGILITY': string;
    /**
     * 資格反応力
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'STEP_VISUAL_RESPONSE': string;
    /**
     * ステップ力
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'STEP_POWER': string;
    /**
     * スイングスピード
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'SWING_SPEED': string;
    /**
     * バランス力（左）
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'BALANCE_L': string;
    /**
     * バランス力（右）
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'BALANCE_R': string;
    /**
     * バランス力（左右差）
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'BALANCE_LR_DIFFERENCE': string;
    /**
     * 長持久力
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'ENDURANCE_LONG': string;
    /**
     * 短持久力
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'ENDURANCE_SHORT': string;
    /**
     * 測定時の年齢
     * @type {number}
     * @memberof GetRanking200ResponseDataInner
     */
    'AGE'?: number;
    /**
     * 測定時の学年
     * @type {string}
     * @memberof GetRanking200ResponseDataInner
     */
    'GAKUNEN'?: string;
}
export declare const GetRanking200ResponseDataInnerSEXEnum: {
    readonly 男性: "男性";
    readonly 女性: "女性";
};
export declare type GetRanking200ResponseDataInnerSEXEnum = typeof GetRanking200ResponseDataInnerSEXEnum[keyof typeof GetRanking200ResponseDataInnerSEXEnum];
/**
 *
 * @export
 * @interface GetReport200Response
 */
export interface GetReport200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof GetReport200Response
     */
    'status': GetReport200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof GetReport200Response
     */
    'message': string;
    /**
     *
     * @type {GetReport200ResponseData}
     * @memberof GetReport200Response
     */
    'data': GetReport200ResponseData;
}
export declare const GetReport200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _404: "404";
};
export declare type GetReport200ResponseStatusEnum = typeof GetReport200ResponseStatusEnum[keyof typeof GetReport200ResponseStatusEnum];
/**
 * 測定結果
 * @export
 * @interface GetReport200ResponseData
 */
export interface GetReport200ResponseData {
    /**
     * 測定会名
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'MEET_NAME': string;
    /**
     * 測定会ID
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'MEET_ID': string;
    /**
     * 測定日
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'STARTDATE': string;
    /**
     * 測定者名
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'NAME': string;
    /**
     * 測定結果ID
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'MEASUREMENT_ID': string;
    /**
     * 0:測定未終了, 1:測定全項目終了して印刷済み
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'IS_PRINT_REPORT': GetReport200ResponseDataISPRINTREPORTEnum;
    /**
     * 性別
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SEX': GetReport200ResponseDataSEXEnum;
    /**
     * 生年月日
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BIRTHDAY': string;
    /**
     * 学年
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'PARTICIPANT_GAKUNEN': string;
    /**
     * 年齢
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'PARTICIPANT_AGE': number;
    /**
     * 参加回数
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'PARTICIPATE_TIME': string;
    /**
     * 身長（cm）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'HEIGHT': string;
    /**
     * 体重（kg）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'WEIGHT': string;
    /**
     * 習ったスポーツ（カンマ区切り）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_TYPE': string;
    /**
     * チーム名
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'TEAM_NAME': string;
    /**
     * 敏しょう性（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'AGILITY_EVA': number;
    /**
     * 敏しょう性
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'AGILITY_NAME': string;
    /**
     * 敏しょう性（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'AGILITY_SCORE': string;
    /**
     * バランス力（左右差）（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_LR_DIFFERENCE_EVA': number;
    /**
     * バランス力（左右差）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_LR_DIFFERENCE_NAME': string;
    /**
     * バランス力（左右差）（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_LR_DIFFERENCE_SCORE': string;
    /**
     * バランス力（左足）（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_L_EVA': number;
    /**
     * バランス力（左足）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_L_NAME': string;
    /**
     * バランス力（左足）（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_L_SCORE': string;
    /**
     * バランス力（右足）（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_R_EVA': number;
    /**
     * バランス力（右足）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_R_NAME': string;
    /**
     * バランス力（右足）（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_R_SCORE': string;
    /**
     * 10mスプリント（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'DASH_10_EVA': number;
    /**
     * 10mスプリント
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'DASH_10_NAME': string;
    /**
     * 10mスプリント（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'DASH_10_SCORE': string;
    /**
     * 長持久力（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'ENDURANCE_LONG_EVA': number;
    /**
     * 長持久力
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'ENDURANCE_LONG_NAME': string;
    /**
     * 長持久力（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'ENDURANCE_LONG_SCORE': string;
    /**
     * 短持久力（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'ENDURANCE_SHORT_EVA': number;
    /**
     * 短持久力
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'ENDURANCE_SHORT_NAME': string;
    /**
     * 短持久力（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'ENDURANCE_SHORT_SCORE': string;
    /**
     * ジャンプ力（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'JUMP_EVA': number;
    /**
     * ジャンプ力
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'JUMP_NAME': string;
    /**
     * ジャンプ力（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'JUMP_SCORE': string;
    /**
     * ステップ力（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'STEP_POWER_EVA': number;
    /**
     * ステップ力
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'STEP_POWER_NAME': string;
    /**
     * ステップ力（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'STEP_POWER_SCORE': string;
    /**
     * 視覚反応力（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'STEP_VISUAL_RESPONSE_EVA': number;
    /**
     * 視覚反応力
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'STEP_VISUAL_RESPONSE_NAME': string;
    /**
     * 視覚反応力（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'STEP_VISUAL_RESPONSE_SCORE': string;
    /**
     * スイングスピード（評価）
     * @type {number}
     * @memberof GetReport200ResponseData
     */
    'SWING_SPEED_EVA': number;
    /**
     * スイングスピード
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SWING_SPEED_NAME': string;
    /**
     * スイングスピード（スコア）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SWING_SPEED_SCORE': string;
    /**
     * 活かせる能力No.1
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BODY_JUDGING1_NAME': string;
    /**
     * 活かせる能力No.1
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BODY_JUDGING1_EVA': string;
    /**
     * 活かせる能力No.2
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BODY_JUDGING2_NAME': string;
    /**
     * 活かせる能力No.2
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BODY_JUDGING2_EVA': string;
    /**
     * 活かせる能力No.3
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BODY_JUDGING3_NAME': string;
    /**
     * 活かせる能力No.2
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BODY_JUDGING3_EVA': string;
    /**
     * 向いているスポーツNo.1
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP1': string;
    /**
     * 向いているスポーツNo.2
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP2': string;
    /**
     * 向いているスポーツNo.3
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP3': string;
    /**
     * 向いているスポーツNo.4
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP4': string;
    /**
     * 向いているスポーツNo.5
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP5': string;
    /**
     * 向いているスポーツNo.6
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP6': string;
    /**
     * 向いているスポーツNo.7
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP7': string;
    /**
     * 向いているスポーツNo.8
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP8': string;
    /**
     * 向いているスポーツNo.9
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP9': string;
    /**
     * 向いているスポーツNo.10
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SPORTS_SCORE_TOP10': string;
    /**
     * ランキング（敏しょう性）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'AGILITYRANK': string;
    /**
     * ランキング（バランス力）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'BALANCE_LR_DIFFERENCERANK': string;
    /**
     * ランキング（10mスプリント）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'DASH_10RANK': string;
    /**
     * ランキング（ジャンプ力）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'JUMPRANK': string;
    /**
     * ランキング（ステップ力）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'STEP_POWERRANK': string;
    /**
     * ランキング（視覚反応力）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'STEP_VISUAL_RESPONSERANK': string;
    /**
     * ランキング（スイングスピード）
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'SWING_SPEEDRANK': string;
    /**
     * ランキング範囲
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'RANGE': string;
    /**
     * アドバイス
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'ADVICE_TEXT': string;
    /**
     * バージョン
     * @type {string}
     * @memberof GetReport200ResponseData
     */
    'VERSION': string;
}
export declare const GetReport200ResponseDataISPRINTREPORTEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type GetReport200ResponseDataISPRINTREPORTEnum = typeof GetReport200ResponseDataISPRINTREPORTEnum[keyof typeof GetReport200ResponseDataISPRINTREPORTEnum];
export declare const GetReport200ResponseDataSEXEnum: {
    readonly 男性: "男性";
    readonly 女性: "女性";
};
export declare type GetReport200ResponseDataSEXEnum = typeof GetReport200ResponseDataSEXEnum[keyof typeof GetReport200ResponseDataSEXEnum];
/**
 * 測定会情報取得
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     * 測定者ID
     * @type {string}
     * @memberof Measurement
     */
    'PARTICIPANT_ID': string;
    /**
     * 測定会ID
     * @type {string}
     * @memberof Measurement
     */
    'MEET_ID': string;
    /**
     * 測定会名
     * @type {string}
     * @memberof Measurement
     */
    'MEET_NAME': string;
    /**
     * 測定結果ID
     * @type {string}
     * @memberof Measurement
     */
    'MEASUREMENT_ID': string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof Measurement
     */
    'STARTDATE': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof Measurement
     */
    'STARTTIME': string;
    /**
     * 当落状況（1:当選, 2:落選）
     * @type {string}
     * @memberof Measurement
     */
    'IS_WIN': MeasurementISWINEnum;
    /**
     * ステータス（1:受付中, 2:受付終了）
     * @type {string}
     * @memberof Measurement
     */
    'STATUS': MeasurementSTATUSEnum;
    /**
     * ラベル出力（0:未ラベル出力, 1:ラベル出力済み）
     * @type {string}
     * @memberof Measurement
     */
    'IS_LABEL_OUTPUT': MeasurementISLABELOUTPUTEnum;
    /**
     * メール配信ステータス（0:未配信, 1:配信済み）
     * @type {string}
     * @memberof Measurement
     */
    'IS_SENDMAIL': MeasurementISSENDMAILEnum;
    /**
     * 参加状況（0:不参加, 1:参加）
     * @type {string}
     * @memberof Measurement
     */
    'IS_MEASUREMENT': MeasurementISMEASUREMENTEnum;
    /**
     * 測定会詳細PDF
     * @type {string}
     * @memberof Measurement
     */
    'MEET_PDF_URL': string;
}
export declare const MeasurementISWINEnum: {
    readonly _1: "1";
    readonly _2: "2";
};
export declare type MeasurementISWINEnum = typeof MeasurementISWINEnum[keyof typeof MeasurementISWINEnum];
export declare const MeasurementSTATUSEnum: {
    readonly _1: "1";
    readonly _2: "2";
};
export declare type MeasurementSTATUSEnum = typeof MeasurementSTATUSEnum[keyof typeof MeasurementSTATUSEnum];
export declare const MeasurementISLABELOUTPUTEnum: {
    readonly _1: "1";
    readonly _2: "2";
};
export declare type MeasurementISLABELOUTPUTEnum = typeof MeasurementISLABELOUTPUTEnum[keyof typeof MeasurementISLABELOUTPUTEnum];
export declare const MeasurementISSENDMAILEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type MeasurementISSENDMAILEnum = typeof MeasurementISSENDMAILEnum[keyof typeof MeasurementISSENDMAILEnum];
export declare const MeasurementISMEASUREMENTEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type MeasurementISMEASUREMENTEnum = typeof MeasurementISMEASUREMENTEnum[keyof typeof MeasurementISMEASUREMENTEnum];
/**
 * 申込受付中測定会
 * @export
 * @interface MeasurementList
 */
export interface MeasurementList {
    /**
     * 測定会ID
     * @type {string}
     * @memberof MeasurementList
     */
    'MEET_ID': string;
    /**
     * 測定会名
     * @type {string}
     * @memberof MeasurementList
     */
    'MEET_NAME': string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTDATE': string;
    /**
     * 開始時間1
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME01': string;
    /**
     * 開始時間2
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME02': string;
    /**
     * 開始時間3
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME03': string;
    /**
     * 開始時間4
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME04': string;
    /**
     * 開始時間5
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME05': string;
    /**
     * 開始時間6
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME06': string;
    /**
     * 開始時間7
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME07': string;
    /**
     * 開始時間8
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME08': string;
    /**
     * 開始時間9
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME09': string;
    /**
     * 開始時間10
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME10': string;
    /**
     * 開始時間11
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME11': string;
    /**
     * 開始時間12
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME12': string;
    /**
     * 開始時間13
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME13': string;
    /**
     * 開始時間14
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME14': string;
    /**
     * 開始時間15
     * @type {string}
     * @memberof MeasurementList
     */
    'STARTTIME15': string;
    /**
     * 測定会ステータス（1=受付中 2=受付終了 0=だと両方 3=だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし）
     * @type {string}
     * @memberof MeasurementList
     */
    'STATUS': MeasurementListSTATUSEnum;
    /**
     * メール配信ステータス（1=メール配信済み 0=メール配信前）
     * @type {string}
     * @memberof MeasurementList
     */
    'IS_SENDMAIL': MeasurementListISSENDMAILEnum;
    /**
     * ラベル印刷ステータス（0=未ラベル出力 1=ラベル出力済み）
     * @type {string}
     * @memberof MeasurementList
     */
    'IS_LABEL_OUTPUT': MeasurementListISLABELOUTPUTEnum;
    /**
     * 測定会詳細PDF
     * @type {string}
     * @memberof MeasurementList
     */
    'MEET_PDF_URL': string;
    /**
     * 測定会公開日
     * @type {string}
     * @memberof MeasurementList
     */
    'OPEN_DATE': string;
    /**
     * 参加対象
     * @type {string}
     * @memberof MeasurementList
     */
    'REGISTRATION': string;
}
export declare const MeasurementListSTATUSEnum: {
    readonly _0: "0";
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export declare type MeasurementListSTATUSEnum = typeof MeasurementListSTATUSEnum[keyof typeof MeasurementListSTATUSEnum];
export declare const MeasurementListISSENDMAILEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type MeasurementListISSENDMAILEnum = typeof MeasurementListISSENDMAILEnum[keyof typeof MeasurementListISSENDMAILEnum];
export declare const MeasurementListISLABELOUTPUTEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type MeasurementListISLABELOUTPUTEnum = typeof MeasurementListISLABELOUTPUTEnum[keyof typeof MeasurementListISLABELOUTPUTEnum];
/**
 * 会員登録（測定会申し込み）
 * @export
 * @interface MeasurementMeet
 */
export interface MeasurementMeet {
    /**
     * 測定者ID
     * @type {string}
     * @memberof MeasurementMeet
     */
    'PARTICIPANT_ID': string;
    /**
     * 当落メール送信日
     * @type {string}
     * @memberof MeasurementMeet
     */
    'SENDMAIL_INFODATE': string;
}
/**
 * 申込受付中測定会
 * @export
 * @interface MeasurementMeetRequest
 */
export interface MeasurementMeetRequest {
    /**
     * リクエストID
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'REQUEST_ID': string;
    /**
     * 測定会ID
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'MEET_ID': string;
    /**
     * 測定者ID
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'PARTICIPANT_ID': string;
    /**
     * 開始日
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'STARTDATE': string;
    /**
     * 第1希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'FIRST_HOPE_TIME': string;
    /**
     * 第2希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'SECOND_HOPE_TIME': string;
    /**
     * 第3希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'THIRD_HOPE_TIME': string;
    /**
     * 当落選結果（0: 落選, 1: 当選, NULL/空欄: 未定）
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'IS_WIN': MeasurementMeetRequestISWINEnum;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'STARTTIME': string;
    /**
     * ステータス（0: 削除, 1: 受付中, 2: 受付終了）
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    'STATUS': MeasurementMeetRequestSTATUSEnum;
}
export declare const MeasurementMeetRequestISWINEnum: {
    readonly _1: "1";
    readonly _2: "2";
    readonly Empty: "";
};
export declare type MeasurementMeetRequestISWINEnum = typeof MeasurementMeetRequestISWINEnum[keyof typeof MeasurementMeetRequestISWINEnum];
export declare const MeasurementMeetRequestSTATUSEnum: {
    readonly _0: "0";
    readonly _1: "1";
    readonly _2: "2";
};
export declare type MeasurementMeetRequestSTATUSEnum = typeof MeasurementMeetRequestSTATUSEnum[keyof typeof MeasurementMeetRequestSTATUSEnum];
/**
 *
 * @export
 * @interface MeasurementSingle
 */
export interface MeasurementSingle {
    /**
     * 測定会ID
     * @type {string}
     * @memberof MeasurementSingle
     */
    'MEET_ID': string;
    /**
     * 測定会名
     * @type {string}
     * @memberof MeasurementSingle
     */
    'MEET_NAME': string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTDATE': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME01': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME02': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME03': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME04': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME05': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME06': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME07': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME08': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME09': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME10': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME11': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME12': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME13': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME14': string;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STARTTIME15': string;
    /**
     * 測定会ステータス（1=受付中 2=受付終了 0=だと両方 3=だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし）
     * @type {string}
     * @memberof MeasurementSingle
     */
    'STATUS': MeasurementSingleSTATUSEnum;
    /**
     * メール配信ステータス（1=メール配信済み 0=メール配信前）
     * @type {string}
     * @memberof MeasurementSingle
     */
    'IS_SENDMAIL': MeasurementSingleISSENDMAILEnum;
    /**
     * 当落通知メール予定日
     * @type {string}
     * @memberof MeasurementSingle
     */
    'SENDMAIL_INFODATE': string;
    /**
     * ラベル印刷ステータス（1=ラベル印刷済み 0=ラベル印刷前）
     * @type {string}
     * @memberof MeasurementSingle
     */
    'IS_LABEL_OUTPUT': MeasurementSingleISLABELOUTPUTEnum;
    /**
     * 測定会詳細PDF
     * @type {string}
     * @memberof MeasurementSingle
     */
    'MEET_PDF_URL': string;
}
export declare const MeasurementSingleSTATUSEnum: {
    readonly _0: "0";
    readonly _1: "1";
    readonly _2: "2";
    readonly _3: "3";
};
export declare type MeasurementSingleSTATUSEnum = typeof MeasurementSingleSTATUSEnum[keyof typeof MeasurementSingleSTATUSEnum];
export declare const MeasurementSingleISSENDMAILEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type MeasurementSingleISSENDMAILEnum = typeof MeasurementSingleISSENDMAILEnum[keyof typeof MeasurementSingleISSENDMAILEnum];
export declare const MeasurementSingleISLABELOUTPUTEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type MeasurementSingleISLABELOUTPUTEnum = typeof MeasurementSingleISLABELOUTPUTEnum[keyof typeof MeasurementSingleISLABELOUTPUTEnum];
/**
 * 測定者
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * 測定者ID
     * @type {string}
     * @memberof Participant
     */
    'PARTICIPANT_ID': string;
    /**
     * 氏名
     * @type {string}
     * @memberof Participant
     */
    'NAME': string;
    /**
     * 氏名（カナ）
     * @type {string}
     * @memberof Participant
     */
    'NAME_KANA': string;
    /**
     * 性別
     * @type {string}
     * @memberof Participant
     */
    'SEX': ParticipantSEXEnum;
    /**
     * 生年月日
     * @type {string}
     * @memberof Participant
     */
    'BIRTHDAY': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Participant
     */
    'MAIL_ADDRESS': string;
}
export declare const ParticipantSEXEnum: {
    readonly 男性: "男性";
    readonly 女性: "女性";
};
export declare type ParticipantSEXEnum = typeof ParticipantSEXEnum[keyof typeof ParticipantSEXEnum];
/**
 *
 * @export
 * @interface RegisterMeasurementMeet200Response
 */
export interface RegisterMeasurementMeet200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof RegisterMeasurementMeet200Response
     */
    'status': RegisterMeasurementMeet200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof RegisterMeasurementMeet200Response
     */
    'message': string;
    /**
     *
     * @type {RegisterMeasurementMeet200ResponseData}
     * @memberof RegisterMeasurementMeet200Response
     */
    'data': RegisterMeasurementMeet200ResponseData;
}
export declare const RegisterMeasurementMeet200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _404: "404";
};
export declare type RegisterMeasurementMeet200ResponseStatusEnum = typeof RegisterMeasurementMeet200ResponseStatusEnum[keyof typeof RegisterMeasurementMeet200ResponseStatusEnum];
/**
 * 会員登録（測定会申し込み）
 * @export
 * @interface RegisterMeasurementMeet200ResponseData
 */
export interface RegisterMeasurementMeet200ResponseData {
    /**
     * 測定者ID
     * @type {string}
     * @memberof RegisterMeasurementMeet200ResponseData
     */
    'PARTICIPANT_ID': string;
    /**
     * 当落メール送信日
     * @type {string}
     * @memberof RegisterMeasurementMeet200ResponseData
     */
    'SENDMAIL_INFODATE': string;
}
/**
 * 測定結果
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 測定会名
     * @type {string}
     * @memberof Report
     */
    'MEET_NAME': string;
    /**
     * 測定会ID
     * @type {string}
     * @memberof Report
     */
    'MEET_ID': string;
    /**
     * 測定日
     * @type {string}
     * @memberof Report
     */
    'STARTDATE': string;
    /**
     * 測定者名
     * @type {string}
     * @memberof Report
     */
    'NAME': string;
    /**
     * 測定結果ID
     * @type {string}
     * @memberof Report
     */
    'MEASUREMENT_ID': string;
    /**
     * 0:測定未終了, 1:測定全項目終了して印刷済み
     * @type {string}
     * @memberof Report
     */
    'IS_PRINT_REPORT': ReportISPRINTREPORTEnum;
    /**
     * 性別
     * @type {string}
     * @memberof Report
     */
    'SEX': ReportSEXEnum;
    /**
     * 生年月日
     * @type {string}
     * @memberof Report
     */
    'BIRTHDAY': string;
    /**
     * 学年
     * @type {string}
     * @memberof Report
     */
    'PARTICIPANT_GAKUNEN': string;
    /**
     * 年齢
     * @type {number}
     * @memberof Report
     */
    'PARTICIPANT_AGE': number;
    /**
     * 参加回数
     * @type {string}
     * @memberof Report
     */
    'PARTICIPATE_TIME': string;
    /**
     * 身長（cm）
     * @type {string}
     * @memberof Report
     */
    'HEIGHT': string;
    /**
     * 体重（kg）
     * @type {string}
     * @memberof Report
     */
    'WEIGHT': string;
    /**
     * 習ったスポーツ（カンマ区切り）
     * @type {string}
     * @memberof Report
     */
    'SPORTS_TYPE': string;
    /**
     * チーム名
     * @type {string}
     * @memberof Report
     */
    'TEAM_NAME': string;
    /**
     * 敏しょう性（評価）
     * @type {number}
     * @memberof Report
     */
    'AGILITY_EVA': number;
    /**
     * 敏しょう性
     * @type {string}
     * @memberof Report
     */
    'AGILITY_NAME': string;
    /**
     * 敏しょう性（スコア）
     * @type {string}
     * @memberof Report
     */
    'AGILITY_SCORE': string;
    /**
     * バランス力（左右差）（評価）
     * @type {number}
     * @memberof Report
     */
    'BALANCE_LR_DIFFERENCE_EVA': number;
    /**
     * バランス力（左右差）
     * @type {string}
     * @memberof Report
     */
    'BALANCE_LR_DIFFERENCE_NAME': string;
    /**
     * バランス力（左右差）（スコア）
     * @type {string}
     * @memberof Report
     */
    'BALANCE_LR_DIFFERENCE_SCORE': string;
    /**
     * バランス力（左足）（評価）
     * @type {number}
     * @memberof Report
     */
    'BALANCE_L_EVA': number;
    /**
     * バランス力（左足）
     * @type {string}
     * @memberof Report
     */
    'BALANCE_L_NAME': string;
    /**
     * バランス力（左足）（スコア）
     * @type {string}
     * @memberof Report
     */
    'BALANCE_L_SCORE': string;
    /**
     * バランス力（右足）（評価）
     * @type {number}
     * @memberof Report
     */
    'BALANCE_R_EVA': number;
    /**
     * バランス力（右足）
     * @type {string}
     * @memberof Report
     */
    'BALANCE_R_NAME': string;
    /**
     * バランス力（右足）（スコア）
     * @type {string}
     * @memberof Report
     */
    'BALANCE_R_SCORE': string;
    /**
     * 10mスプリント（評価）
     * @type {number}
     * @memberof Report
     */
    'DASH_10_EVA': number;
    /**
     * 10mスプリント
     * @type {string}
     * @memberof Report
     */
    'DASH_10_NAME': string;
    /**
     * 10mスプリント（スコア）
     * @type {string}
     * @memberof Report
     */
    'DASH_10_SCORE': string;
    /**
     * 長持久力（評価）
     * @type {number}
     * @memberof Report
     */
    'ENDURANCE_LONG_EVA': number;
    /**
     * 長持久力
     * @type {string}
     * @memberof Report
     */
    'ENDURANCE_LONG_NAME': string;
    /**
     * 長持久力（スコア）
     * @type {string}
     * @memberof Report
     */
    'ENDURANCE_LONG_SCORE': string;
    /**
     * 短持久力（評価）
     * @type {number}
     * @memberof Report
     */
    'ENDURANCE_SHORT_EVA': number;
    /**
     * 短持久力
     * @type {string}
     * @memberof Report
     */
    'ENDURANCE_SHORT_NAME': string;
    /**
     * 短持久力（スコア）
     * @type {string}
     * @memberof Report
     */
    'ENDURANCE_SHORT_SCORE': string;
    /**
     * ジャンプ力（評価）
     * @type {number}
     * @memberof Report
     */
    'JUMP_EVA': number;
    /**
     * ジャンプ力
     * @type {string}
     * @memberof Report
     */
    'JUMP_NAME': string;
    /**
     * ジャンプ力（スコア）
     * @type {string}
     * @memberof Report
     */
    'JUMP_SCORE': string;
    /**
     * ステップ力（評価）
     * @type {number}
     * @memberof Report
     */
    'STEP_POWER_EVA': number;
    /**
     * ステップ力
     * @type {string}
     * @memberof Report
     */
    'STEP_POWER_NAME': string;
    /**
     * ステップ力（スコア）
     * @type {string}
     * @memberof Report
     */
    'STEP_POWER_SCORE': string;
    /**
     * 視覚反応力（評価）
     * @type {number}
     * @memberof Report
     */
    'STEP_VISUAL_RESPONSE_EVA': number;
    /**
     * 視覚反応力
     * @type {string}
     * @memberof Report
     */
    'STEP_VISUAL_RESPONSE_NAME': string;
    /**
     * 視覚反応力（スコア）
     * @type {string}
     * @memberof Report
     */
    'STEP_VISUAL_RESPONSE_SCORE': string;
    /**
     * スイングスピード（評価）
     * @type {number}
     * @memberof Report
     */
    'SWING_SPEED_EVA': number;
    /**
     * スイングスピード
     * @type {string}
     * @memberof Report
     */
    'SWING_SPEED_NAME': string;
    /**
     * スイングスピード（スコア）
     * @type {string}
     * @memberof Report
     */
    'SWING_SPEED_SCORE': string;
    /**
     * 活かせる能力No.1
     * @type {string}
     * @memberof Report
     */
    'BODY_JUDGING1_NAME': string;
    /**
     * 活かせる能力No.1
     * @type {string}
     * @memberof Report
     */
    'BODY_JUDGING1_EVA': string;
    /**
     * 活かせる能力No.2
     * @type {string}
     * @memberof Report
     */
    'BODY_JUDGING2_NAME': string;
    /**
     * 活かせる能力No.2
     * @type {string}
     * @memberof Report
     */
    'BODY_JUDGING2_EVA': string;
    /**
     * 活かせる能力No.3
     * @type {string}
     * @memberof Report
     */
    'BODY_JUDGING3_NAME': string;
    /**
     * 活かせる能力No.2
     * @type {string}
     * @memberof Report
     */
    'BODY_JUDGING3_EVA': string;
    /**
     * 向いているスポーツNo.1
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP1': string;
    /**
     * 向いているスポーツNo.2
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP2': string;
    /**
     * 向いているスポーツNo.3
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP3': string;
    /**
     * 向いているスポーツNo.4
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP4': string;
    /**
     * 向いているスポーツNo.5
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP5': string;
    /**
     * 向いているスポーツNo.6
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP6': string;
    /**
     * 向いているスポーツNo.7
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP7': string;
    /**
     * 向いているスポーツNo.8
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP8': string;
    /**
     * 向いているスポーツNo.9
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP9': string;
    /**
     * 向いているスポーツNo.10
     * @type {string}
     * @memberof Report
     */
    'SPORTS_SCORE_TOP10': string;
    /**
     * ランキング（敏しょう性）
     * @type {string}
     * @memberof Report
     */
    'AGILITYRANK': string;
    /**
     * ランキング（バランス力）
     * @type {string}
     * @memberof Report
     */
    'BALANCE_LR_DIFFERENCERANK': string;
    /**
     * ランキング（10mスプリント）
     * @type {string}
     * @memberof Report
     */
    'DASH_10RANK': string;
    /**
     * ランキング（ジャンプ力）
     * @type {string}
     * @memberof Report
     */
    'JUMPRANK': string;
    /**
     * ランキング（ステップ力）
     * @type {string}
     * @memberof Report
     */
    'STEP_POWERRANK': string;
    /**
     * ランキング（視覚反応力）
     * @type {string}
     * @memberof Report
     */
    'STEP_VISUAL_RESPONSERANK': string;
    /**
     * ランキング（スイングスピード）
     * @type {string}
     * @memberof Report
     */
    'SWING_SPEEDRANK': string;
    /**
     * ランキング範囲
     * @type {string}
     * @memberof Report
     */
    'RANGE': string;
    /**
     * アドバイス
     * @type {string}
     * @memberof Report
     */
    'ADVICE_TEXT': string;
    /**
     * バージョン
     * @type {string}
     * @memberof Report
     */
    'VERSION': string;
}
export declare const ReportISPRINTREPORTEnum: {
    readonly _0: "0";
    readonly _1: "1";
};
export declare type ReportISPRINTREPORTEnum = typeof ReportISPRINTREPORTEnum[keyof typeof ReportISPRINTREPORTEnum];
export declare const ReportSEXEnum: {
    readonly 男性: "男性";
    readonly 女性: "女性";
};
export declare type ReportSEXEnum = typeof ReportSEXEnum[keyof typeof ReportSEXEnum];
/**
 *
 * @export
 * @interface SendTestMail200Response
 */
export interface SendTestMail200Response {
    /**
     * ステータスコード
     * @type {string}
     * @memberof SendTestMail200Response
     */
    'status': SendTestMail200ResponseStatusEnum;
    /**
     * メッセージ
     * @type {string}
     * @memberof SendTestMail200Response
     */
    'message': string;
}
export declare const SendTestMail200ResponseStatusEnum: {
    readonly _200: "200";
    readonly _402: "402";
};
export declare type SendTestMail200ResponseStatusEnum = typeof SendTestMail200ResponseStatusEnum[keyof typeof SendTestMail200ResponseStatusEnum];
/**
 * DosaAdminApi - axios parameter creator
 * @export
 */
export declare const DosaAdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary 参加測定会一覧情報取得
     * @param {string} participantId 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurement: (participantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary 測定会一覧取得
     * @param {string} status 測定会ステータス 1&#x3D;受付中 2&#x3D;受付終了 0&#x3D;だと両方 3&#x3D;だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementList: (status: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary 申し込み測定会一覧取得
     * @param {string} participantId 測定者ID
     * @param {string} [meetId] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeetRequest: (participantId: string, meetId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary 測定会単発情報取得
     * @param {string} meetId 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementSingle: (meetId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} mailAddress メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipants: (mailAddress: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary ランキング取得
     * @param {string} type ランキング対象
     * @param {string} ageStart 何歳から
     * @param {string} ageEnd 何歳まで
     * @param {string} sex 性別(1:男性, 2:女性)
     * @param {string} order 並び替え(asc:早い順, dsec:遅い順)
     * @param {string} topnum 欲しい件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRanking: (type: string, ageStart: string, ageEnd: string, sex: string, order: string, topnum: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary レポート情報取得
     * @param {string} participantId 測定者ID
     * @param {string} meetId 測定会ID
     * @param {string} measurementId 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport: (participantId: string, meetId: string, measurementId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary 会員登録（測定会申し込み）
     * @param {string} meetId 測定会ID
     * @param {string} participantName 名前
     * @param {string} participantNameKana 名前（カナ）
     * @param {string} nickName ニックネーム
     * @param {string} isShownameRanking ランキングへの名前表示（1:表示, 0:非表示）
     * @param {string} parentName1 保護者氏名（保護者のメールアドレスの場合）
     * @param {string} parentName2 保護者氏名（プライバシーポリシーに同意）
     * @param {string} mailAddress メールアドレス
     * @param {string} zipcode1 郵便番号（3桁）
     * @param {string} zipcode2 郵便番号（4桁）
     * @param {string} address 住所
     * @param {string} telephone 電話番号
     * @param {string} sex 性別
     * @param {string} birthday1 生年月日（年）
     * @param {string} birthday2 生年月日（月：頭のゼロは不要）
     * @param {string} birthday3 生年月日（日：頭のゼロは不要）
     * @param {string} firstHopeTime 希望測定開始時間1
     * @param {string} secondHopeTime 希望測定開始時間2
     * @param {string} thirdHopeTime 希望測定開始時間3
     * @param {string} sportsType 習ったスポーツ（カンマ区切り）
     * @param {string} schoolName 学校名
     * @param {string} teamName チーム名
     * @param {string} height 身長（cm）
     * @param {string} weight 体重（kg）
     * @param {string} enduranceLongSelf 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
     * @param {string} participateTime 参加回数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerMeasurementMeet: (meetId: string, participantName: string, participantNameKana: string, nickName: string, isShownameRanking: string, parentName1: string, parentName2: string, mailAddress: string, zipcode1: string, zipcode2: string, address: string, telephone: string, sex: string, birthday1: string, birthday2: string, birthday3: string, firstHopeTime: string, secondHopeTime: string, thirdHopeTime: string, sportsType: string, schoolName: string, teamName: string, height: string, weight: string, enduranceLongSelf: string, participateTime: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary テストメール送信
     * @param {string} mailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendTestMail: (mailAddress: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DosaAdminApi - functional programming interface
 * @export
 */
export declare const DosaAdminApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary 参加測定会一覧情報取得
     * @param {string} participantId 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurement(participantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMeasurement200Response>>;
    /**
     *
     * @summary 測定会一覧取得
     * @param {string} status 測定会ステータス 1&#x3D;受付中 2&#x3D;受付終了 0&#x3D;だと両方 3&#x3D;だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementList(status: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMeasurementList200Response>>;
    /**
     *
     * @summary 申し込み測定会一覧取得
     * @param {string} participantId 測定者ID
     * @param {string} [meetId] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeetRequest(participantId: string, meetId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMeasurementMeetRequest200Response>>;
    /**
     *
     * @summary 測定会単発情報取得
     * @param {string} meetId 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementSingle(meetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMeasurementSingle200Response>>;
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} mailAddress メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipants(mailAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetParticipants200Response>>;
    /**
     *
     * @summary ランキング取得
     * @param {string} type ランキング対象
     * @param {string} ageStart 何歳から
     * @param {string} ageEnd 何歳まで
     * @param {string} sex 性別(1:男性, 2:女性)
     * @param {string} order 並び替え(asc:早い順, dsec:遅い順)
     * @param {string} topnum 欲しい件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRanking(type: string, ageStart: string, ageEnd: string, sex: string, order: string, topnum: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRanking200Response>>;
    /**
     *
     * @summary レポート情報取得
     * @param {string} participantId 測定者ID
     * @param {string} meetId 測定会ID
     * @param {string} measurementId 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(participantId: string, meetId: string, measurementId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReport200Response>>;
    /**
     *
     * @summary 会員登録（測定会申し込み）
     * @param {string} meetId 測定会ID
     * @param {string} participantName 名前
     * @param {string} participantNameKana 名前（カナ）
     * @param {string} nickName ニックネーム
     * @param {string} isShownameRanking ランキングへの名前表示（1:表示, 0:非表示）
     * @param {string} parentName1 保護者氏名（保護者のメールアドレスの場合）
     * @param {string} parentName2 保護者氏名（プライバシーポリシーに同意）
     * @param {string} mailAddress メールアドレス
     * @param {string} zipcode1 郵便番号（3桁）
     * @param {string} zipcode2 郵便番号（4桁）
     * @param {string} address 住所
     * @param {string} telephone 電話番号
     * @param {string} sex 性別
     * @param {string} birthday1 生年月日（年）
     * @param {string} birthday2 生年月日（月：頭のゼロは不要）
     * @param {string} birthday3 生年月日（日：頭のゼロは不要）
     * @param {string} firstHopeTime 希望測定開始時間1
     * @param {string} secondHopeTime 希望測定開始時間2
     * @param {string} thirdHopeTime 希望測定開始時間3
     * @param {string} sportsType 習ったスポーツ（カンマ区切り）
     * @param {string} schoolName 学校名
     * @param {string} teamName チーム名
     * @param {string} height 身長（cm）
     * @param {string} weight 体重（kg）
     * @param {string} enduranceLongSelf 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
     * @param {string} participateTime 参加回数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerMeasurementMeet(meetId: string, participantName: string, participantNameKana: string, nickName: string, isShownameRanking: string, parentName1: string, parentName2: string, mailAddress: string, zipcode1: string, zipcode2: string, address: string, telephone: string, sex: string, birthday1: string, birthday2: string, birthday3: string, firstHopeTime: string, secondHopeTime: string, thirdHopeTime: string, sportsType: string, schoolName: string, teamName: string, height: string, weight: string, enduranceLongSelf: string, participateTime: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterMeasurementMeet200Response>>;
    /**
     *
     * @summary テストメール送信
     * @param {string} mailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendTestMail(mailAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendTestMail200Response>>;
};
/**
 * DosaAdminApi - factory interface
 * @export
 */
export declare const DosaAdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary 参加測定会一覧情報取得
     * @param {string} participantId 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurement(participantId: string, options?: any): AxiosPromise<GetMeasurement200Response>;
    /**
     *
     * @summary 測定会一覧取得
     * @param {string} status 測定会ステータス 1&#x3D;受付中 2&#x3D;受付終了 0&#x3D;だと両方 3&#x3D;だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementList(status: string, options?: any): AxiosPromise<GetMeasurementList200Response>;
    /**
     *
     * @summary 申し込み測定会一覧取得
     * @param {string} participantId 測定者ID
     * @param {string} [meetId] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementMeetRequest(participantId: string, meetId?: string, options?: any): AxiosPromise<GetMeasurementMeetRequest200Response>;
    /**
     *
     * @summary 測定会単発情報取得
     * @param {string} meetId 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurementSingle(meetId: string, options?: any): AxiosPromise<GetMeasurementSingle200Response>;
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} mailAddress メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipants(mailAddress: string, options?: any): AxiosPromise<GetParticipants200Response>;
    /**
     *
     * @summary ランキング取得
     * @param {string} type ランキング対象
     * @param {string} ageStart 何歳から
     * @param {string} ageEnd 何歳まで
     * @param {string} sex 性別(1:男性, 2:女性)
     * @param {string} order 並び替え(asc:早い順, dsec:遅い順)
     * @param {string} topnum 欲しい件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRanking(type: string, ageStart: string, ageEnd: string, sex: string, order: string, topnum: string, options?: any): AxiosPromise<GetRanking200Response>;
    /**
     *
     * @summary レポート情報取得
     * @param {string} participantId 測定者ID
     * @param {string} meetId 測定会ID
     * @param {string} measurementId 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(participantId: string, meetId: string, measurementId: string, options?: any): AxiosPromise<GetReport200Response>;
    /**
     *
     * @summary 会員登録（測定会申し込み）
     * @param {string} meetId 測定会ID
     * @param {string} participantName 名前
     * @param {string} participantNameKana 名前（カナ）
     * @param {string} nickName ニックネーム
     * @param {string} isShownameRanking ランキングへの名前表示（1:表示, 0:非表示）
     * @param {string} parentName1 保護者氏名（保護者のメールアドレスの場合）
     * @param {string} parentName2 保護者氏名（プライバシーポリシーに同意）
     * @param {string} mailAddress メールアドレス
     * @param {string} zipcode1 郵便番号（3桁）
     * @param {string} zipcode2 郵便番号（4桁）
     * @param {string} address 住所
     * @param {string} telephone 電話番号
     * @param {string} sex 性別
     * @param {string} birthday1 生年月日（年）
     * @param {string} birthday2 生年月日（月：頭のゼロは不要）
     * @param {string} birthday3 生年月日（日：頭のゼロは不要）
     * @param {string} firstHopeTime 希望測定開始時間1
     * @param {string} secondHopeTime 希望測定開始時間2
     * @param {string} thirdHopeTime 希望測定開始時間3
     * @param {string} sportsType 習ったスポーツ（カンマ区切り）
     * @param {string} schoolName 学校名
     * @param {string} teamName チーム名
     * @param {string} height 身長（cm）
     * @param {string} weight 体重（kg）
     * @param {string} enduranceLongSelf 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
     * @param {string} participateTime 参加回数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerMeasurementMeet(meetId: string, participantName: string, participantNameKana: string, nickName: string, isShownameRanking: string, parentName1: string, parentName2: string, mailAddress: string, zipcode1: string, zipcode2: string, address: string, telephone: string, sex: string, birthday1: string, birthday2: string, birthday3: string, firstHopeTime: string, secondHopeTime: string, thirdHopeTime: string, sportsType: string, schoolName: string, teamName: string, height: string, weight: string, enduranceLongSelf: string, participateTime: string, options?: any): AxiosPromise<RegisterMeasurementMeet200Response>;
    /**
     *
     * @summary テストメール送信
     * @param {string} mailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendTestMail(mailAddress: string, options?: any): AxiosPromise<SendTestMail200Response>;
};
/**
 * DosaAdminApi - object-oriented interface
 * @export
 * @class DosaAdminApi
 * @extends {BaseAPI}
 */
export declare class DosaAdminApi extends BaseAPI {
    /**
     *
     * @summary 参加測定会一覧情報取得
     * @param {string} participantId 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurement(participantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMeasurement200Response, any>>;
    /**
     *
     * @summary 測定会一覧取得
     * @param {string} status 測定会ステータス 1&#x3D;受付中 2&#x3D;受付終了 0&#x3D;だと両方 3&#x3D;だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementList(status: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMeasurementList200Response, any>>;
    /**
     *
     * @summary 申し込み測定会一覧取得
     * @param {string} participantId 測定者ID
     * @param {string} [meetId] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementMeetRequest(participantId: string, meetId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMeasurementMeetRequest200Response, any>>;
    /**
     *
     * @summary 測定会単発情報取得
     * @param {string} meetId 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementSingle(meetId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMeasurementSingle200Response, any>>;
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} mailAddress メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getParticipants(mailAddress: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetParticipants200Response, any>>;
    /**
     *
     * @summary ランキング取得
     * @param {string} type ランキング対象
     * @param {string} ageStart 何歳から
     * @param {string} ageEnd 何歳まで
     * @param {string} sex 性別(1:男性, 2:女性)
     * @param {string} order 並び替え(asc:早い順, dsec:遅い順)
     * @param {string} topnum 欲しい件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getRanking(type: string, ageStart: string, ageEnd: string, sex: string, order: string, topnum: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRanking200Response, any>>;
    /**
     *
     * @summary レポート情報取得
     * @param {string} participantId 測定者ID
     * @param {string} meetId 測定会ID
     * @param {string} measurementId 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getReport(participantId: string, meetId: string, measurementId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetReport200Response, any>>;
    /**
     *
     * @summary 会員登録（測定会申し込み）
     * @param {string} meetId 測定会ID
     * @param {string} participantName 名前
     * @param {string} participantNameKana 名前（カナ）
     * @param {string} nickName ニックネーム
     * @param {string} isShownameRanking ランキングへの名前表示（1:表示, 0:非表示）
     * @param {string} parentName1 保護者氏名（保護者のメールアドレスの場合）
     * @param {string} parentName2 保護者氏名（プライバシーポリシーに同意）
     * @param {string} mailAddress メールアドレス
     * @param {string} zipcode1 郵便番号（3桁）
     * @param {string} zipcode2 郵便番号（4桁）
     * @param {string} address 住所
     * @param {string} telephone 電話番号
     * @param {string} sex 性別
     * @param {string} birthday1 生年月日（年）
     * @param {string} birthday2 生年月日（月：頭のゼロは不要）
     * @param {string} birthday3 生年月日（日：頭のゼロは不要）
     * @param {string} firstHopeTime 希望測定開始時間1
     * @param {string} secondHopeTime 希望測定開始時間2
     * @param {string} thirdHopeTime 希望測定開始時間3
     * @param {string} sportsType 習ったスポーツ（カンマ区切り）
     * @param {string} schoolName 学校名
     * @param {string} teamName チーム名
     * @param {string} height 身長（cm）
     * @param {string} weight 体重（kg）
     * @param {string} enduranceLongSelf 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
     * @param {string} participateTime 参加回数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    registerMeasurementMeet(meetId: string, participantName: string, participantNameKana: string, nickName: string, isShownameRanking: string, parentName1: string, parentName2: string, mailAddress: string, zipcode1: string, zipcode2: string, address: string, telephone: string, sex: string, birthday1: string, birthday2: string, birthday3: string, firstHopeTime: string, secondHopeTime: string, thirdHopeTime: string, sportsType: string, schoolName: string, teamName: string, height: string, weight: string, enduranceLongSelf: string, participateTime: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RegisterMeasurementMeet200Response, any>>;
    /**
     *
     * @summary テストメール送信
     * @param {string} mailAddress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    sendTestMail(mailAddress: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SendTestMail200Response, any>>;
}
