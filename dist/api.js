"use strict";
// tslint:disable
/**
 * DOSA管理API
 * RESTful API of DOSA管理システム
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var MeasurementSexEnum;
(function (MeasurementSexEnum) {
    MeasurementSexEnum[MeasurementSexEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementSexEnum[MeasurementSexEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(MeasurementSexEnum = exports.MeasurementSexEnum || (exports.MeasurementSexEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementDataGradeEnum;
(function (MeasurementDataGradeEnum) {
    MeasurementDataGradeEnum[MeasurementDataGradeEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementDataGradeEnum[MeasurementDataGradeEnum["NUMBER_2"] = 2] = "NUMBER_2";
    MeasurementDataGradeEnum[MeasurementDataGradeEnum["NUMBER_3"] = 3] = "NUMBER_3";
    MeasurementDataGradeEnum[MeasurementDataGradeEnum["NUMBER_4"] = 4] = "NUMBER_4";
    MeasurementDataGradeEnum[MeasurementDataGradeEnum["NUMBER_5"] = 5] = "NUMBER_5";
})(MeasurementDataGradeEnum = exports.MeasurementDataGradeEnum || (exports.MeasurementDataGradeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementDataRankRangeEnum;
(function (MeasurementDataRankRangeEnum) {
    MeasurementDataRankRangeEnum[MeasurementDataRankRangeEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementDataRankRangeEnum[MeasurementDataRankRangeEnum["NUMBER_2"] = 2] = "NUMBER_2";
    MeasurementDataRankRangeEnum[MeasurementDataRankRangeEnum["NUMBER_3"] = 3] = "NUMBER_3";
    MeasurementDataRankRangeEnum[MeasurementDataRankRangeEnum["NUMBER_4"] = 4] = "NUMBER_4";
})(MeasurementDataRankRangeEnum = exports.MeasurementDataRankRangeEnum || (exports.MeasurementDataRankRangeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementMeetStatusEnum;
(function (MeasurementMeetStatusEnum) {
    MeasurementMeetStatusEnum[MeasurementMeetStatusEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementMeetStatusEnum[MeasurementMeetStatusEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(MeasurementMeetStatusEnum = exports.MeasurementMeetStatusEnum || (exports.MeasurementMeetStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementMeetRequestIsWinEnum;
(function (MeasurementMeetRequestIsWinEnum) {
    MeasurementMeetRequestIsWinEnum[MeasurementMeetRequestIsWinEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementMeetRequestIsWinEnum[MeasurementMeetRequestIsWinEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(MeasurementMeetRequestIsWinEnum = exports.MeasurementMeetRequestIsWinEnum || (exports.MeasurementMeetRequestIsWinEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementMeetRequestStatusEnum;
(function (MeasurementMeetRequestStatusEnum) {
    MeasurementMeetRequestStatusEnum[MeasurementMeetRequestStatusEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementMeetRequestStatusEnum[MeasurementMeetRequestStatusEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(MeasurementMeetRequestStatusEnum = exports.MeasurementMeetRequestStatusEnum || (exports.MeasurementMeetRequestStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementMeetRequestDataSexEnum;
(function (MeasurementMeetRequestDataSexEnum) {
    MeasurementMeetRequestDataSexEnum[MeasurementMeetRequestDataSexEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementMeetRequestDataSexEnum[MeasurementMeetRequestDataSexEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(MeasurementMeetRequestDataSexEnum = exports.MeasurementMeetRequestDataSexEnum || (exports.MeasurementMeetRequestDataSexEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementMeetRequestDataEnduranceLongSelfEnum;
(function (MeasurementMeetRequestDataEnduranceLongSelfEnum) {
    MeasurementMeetRequestDataEnduranceLongSelfEnum[MeasurementMeetRequestDataEnduranceLongSelfEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementMeetRequestDataEnduranceLongSelfEnum[MeasurementMeetRequestDataEnduranceLongSelfEnum["NUMBER_2"] = 2] = "NUMBER_2";
    MeasurementMeetRequestDataEnduranceLongSelfEnum[MeasurementMeetRequestDataEnduranceLongSelfEnum["NUMBER_3"] = 3] = "NUMBER_3";
    MeasurementMeetRequestDataEnduranceLongSelfEnum[MeasurementMeetRequestDataEnduranceLongSelfEnum["NUMBER_4"] = 4] = "NUMBER_4";
    MeasurementMeetRequestDataEnduranceLongSelfEnum[MeasurementMeetRequestDataEnduranceLongSelfEnum["NUMBER_5"] = 5] = "NUMBER_5";
})(MeasurementMeetRequestDataEnduranceLongSelfEnum = exports.MeasurementMeetRequestDataEnduranceLongSelfEnum || (exports.MeasurementMeetRequestDataEnduranceLongSelfEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ParticipantSexEnum;
(function (ParticipantSexEnum) {
    ParticipantSexEnum[ParticipantSexEnum["NUMBER_1"] = 1] = "NUMBER_1";
    ParticipantSexEnum[ParticipantSexEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(ParticipantSexEnum = exports.ParticipantSexEnum || (exports.ParticipantSexEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RankingDataSexEnum;
(function (RankingDataSexEnum) {
    RankingDataSexEnum[RankingDataSexEnum["NUMBER_1"] = 1] = "NUMBER_1";
    RankingDataSexEnum[RankingDataSexEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(RankingDataSexEnum = exports.RankingDataSexEnum || (exports.RankingDataSexEnum = {}));
/**
    * @export
    * @enum {string}
    */
var RankingDataRankRangeEnum;
(function (RankingDataRankRangeEnum) {
    RankingDataRankRangeEnum[RankingDataRankRangeEnum["NUMBER_1"] = 1] = "NUMBER_1";
    RankingDataRankRangeEnum[RankingDataRankRangeEnum["NUMBER_2"] = 2] = "NUMBER_2";
    RankingDataRankRangeEnum[RankingDataRankRangeEnum["NUMBER_3"] = 3] = "NUMBER_3";
    RankingDataRankRangeEnum[RankingDataRankRangeEnum["NUMBER_4"] = 4] = "NUMBER_4";
})(RankingDataRankRangeEnum = exports.RankingDataRankRangeEnum || (exports.RankingDataRankRangeEnum = {}));
/**
 * DosaAdminApi - axios parameter creator
 * @export
 */
exports.DosaAdminApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 測定結果取得
         * @param {number} participant_id 測定者ID
         * @param {number} meet_id 測定会ID
         * @param {number} measurement_id 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participant_id, meet_id, measurement_id, options = {}) {
            // verify required parameter 'participant_id' is not null or undefined
            if (participant_id === null || participant_id === undefined) {
                throw new base_1.RequiredError('participant_id', 'Required parameter participant_id was null or undefined when calling getMeasurement.');
            }
            // verify required parameter 'meet_id' is not null or undefined
            if (meet_id === null || meet_id === undefined) {
                throw new base_1.RequiredError('meet_id', 'Required parameter meet_id was null or undefined when calling getMeasurement.');
            }
            // verify required parameter 'measurement_id' is not null or undefined
            if (measurement_id === null || measurement_id === undefined) {
                throw new base_1.RequiredError('measurement_id', 'Required parameter measurement_id was null or undefined when calling getMeasurement.');
            }
            const localVarPath = `/api/v1/participants/{participant_id}/measurement_meets/{meet_id}/measurements/{measurement_id}`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participant_id)))
                .replace(`{${"meet_id"}}`, encodeURIComponent(String(meet_id)))
                .replace(`{${"measurement_id"}}`, encodeURIComponent(String(measurement_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 測定会取得
         * @param {number} meet_id 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeet(meet_id, options = {}) {
            // verify required parameter 'meet_id' is not null or undefined
            if (meet_id === null || meet_id === undefined) {
                throw new base_1.RequiredError('meet_id', 'Required parameter meet_id was null or undefined when calling getMeasurementMeet.');
            }
            const localVarPath = `/api/v1/measurement_meets/{meet_id}`
                .replace(`{${"meet_id"}}`, encodeURIComponent(String(meet_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 申込み測定会一覧取得
         * @param {number} participant_id 測定者ID
         * @param {number} [meet_id] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participant_id, meet_id, options = {}) {
            // verify required parameter 'participant_id' is not null or undefined
            if (participant_id === null || participant_id === undefined) {
                throw new base_1.RequiredError('participant_id', 'Required parameter participant_id was null or undefined when calling getMeasurementMeetRequest.');
            }
            const localVarPath = `/api/v1/participants/{participant_id}/measurement_meet_requests`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participant_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            if (meet_id !== undefined) {
                localVarQueryParameter['meet_id'] = meet_id;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 測定会一覧取得
         * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeets(status, options = {}) {
            const localVarPath = `/api/v1/measurement_meets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 測定者情報一覧取得
         * @param {string} [mail_address] メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mail_address, options = {}) {
            const localVarPath = `/api/v1/participants`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            if (mail_address !== undefined) {
                localVarQueryParameter['mail_address'] = mail_address;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 参加測定会一覧取得
         * @param {number} participant_id 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipatedMeasurementMeets(participant_id, options = {}) {
            // verify required parameter 'participant_id' is not null or undefined
            if (participant_id === null || participant_id === undefined) {
                throw new base_1.RequiredError('participant_id', 'Required parameter participant_id was null or undefined when calling getParticipatedMeasurementMeets.');
            }
            const localVarPath = `/api/v1/participants/{participant_id}/measurement_meets`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participant_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ランキング一覧取得
         * @param {1 | 2 | 3 | 4} [rank_range] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
         * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRankings(rank_range, sex, options = {}) {
            const localVarPath = `/api/v1/rankings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            if (rank_range !== undefined) {
                localVarQueryParameter['rank_range'] = rank_range;
            }
            if (sex !== undefined) {
                localVarQueryParameter['sex'] = sex;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 測定会申込み
         * @param {number} meet_id 測定会ID
         * @param {MeasurementMeetRequestData} [MeasurementMeetRequestData]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meet_id, MeasurementMeetRequestData, options = {}) {
            // verify required parameter 'meet_id' is not null or undefined
            if (meet_id === null || meet_id === undefined) {
                throw new base_1.RequiredError('meet_id', 'Required parameter meet_id was null or undefined when calling postMeasurementMeet.');
            }
            const localVarPath = `/api/v1/meaasuremnt_meets/{meet_id}`
                .replace(`{${"meet_id"}}`, encodeURIComponent(String(meet_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof MeasurementMeetRequestData !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(MeasurementMeetRequestData !== undefined ? MeasurementMeetRequestData : {}) : (MeasurementMeetRequestData || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary テストメール送信
         * @param {InlineObject} [InlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(InlineObject, options = {}) {
            const localVarPath = `/api/v1/send_test_mail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof InlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(InlineObject !== undefined ? InlineObject : {}) : (InlineObject || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DosaAdminApi - functional programming interface
 * @export
 */
exports.DosaAdminApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 測定結果取得
         * @param {number} participant_id 測定者ID
         * @param {number} meet_id 測定会ID
         * @param {number} measurement_id 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participant_id, meet_id, measurement_id, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getMeasurement(participant_id, meet_id, measurement_id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 測定会取得
         * @param {number} meet_id 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeet(meet_id, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getMeasurementMeet(meet_id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 申込み測定会一覧取得
         * @param {number} participant_id 測定者ID
         * @param {number} [meet_id] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participant_id, meet_id, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getMeasurementMeetRequest(participant_id, meet_id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 測定会一覧取得
         * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeets(status, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getMeasurementMeets(status, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 測定者情報一覧取得
         * @param {string} [mail_address] メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mail_address, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getParticipants(mail_address, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 参加測定会一覧取得
         * @param {number} participant_id 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipatedMeasurementMeets(participant_id, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getParticipatedMeasurementMeets(participant_id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ランキング一覧取得
         * @param {1 | 2 | 3 | 4} [rank_range] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
         * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRankings(rank_range, sex, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getRankings(rank_range, sex, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 測定会申込み
         * @param {number} meet_id 測定会ID
         * @param {MeasurementMeetRequestData} [MeasurementMeetRequestData]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meet_id, MeasurementMeetRequestData, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).postMeasurementMeet(meet_id, MeasurementMeetRequestData, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary テストメール送信
         * @param {InlineObject} [InlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(InlineObject, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).postSendTestMail(InlineObject, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DosaAdminApi - factory interface
 * @export
 */
exports.DosaAdminApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary 測定結果取得
         * @param {number} participant_id 測定者ID
         * @param {number} meet_id 測定会ID
         * @param {number} measurement_id 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participant_id, meet_id, measurement_id, options) {
            return exports.DosaAdminApiFp(configuration).getMeasurement(participant_id, meet_id, measurement_id, options)(axios, basePath);
        },
        /**
         *
         * @summary 測定会取得
         * @param {number} meet_id 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeet(meet_id, options) {
            return exports.DosaAdminApiFp(configuration).getMeasurementMeet(meet_id, options)(axios, basePath);
        },
        /**
         *
         * @summary 申込み測定会一覧取得
         * @param {number} participant_id 測定者ID
         * @param {number} [meet_id] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participant_id, meet_id, options) {
            return exports.DosaAdminApiFp(configuration).getMeasurementMeetRequest(participant_id, meet_id, options)(axios, basePath);
        },
        /**
         *
         * @summary 測定会一覧取得
         * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeets(status, options) {
            return exports.DosaAdminApiFp(configuration).getMeasurementMeets(status, options)(axios, basePath);
        },
        /**
         *
         * @summary 測定者情報一覧取得
         * @param {string} [mail_address] メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mail_address, options) {
            return exports.DosaAdminApiFp(configuration).getParticipants(mail_address, options)(axios, basePath);
        },
        /**
         *
         * @summary 参加測定会一覧取得
         * @param {number} participant_id 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipatedMeasurementMeets(participant_id, options) {
            return exports.DosaAdminApiFp(configuration).getParticipatedMeasurementMeets(participant_id, options)(axios, basePath);
        },
        /**
         *
         * @summary ランキング一覧取得
         * @param {1 | 2 | 3 | 4} [rank_range] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
         * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRankings(rank_range, sex, options) {
            return exports.DosaAdminApiFp(configuration).getRankings(rank_range, sex, options)(axios, basePath);
        },
        /**
         *
         * @summary 測定会申込み
         * @param {number} meet_id 測定会ID
         * @param {MeasurementMeetRequestData} [MeasurementMeetRequestData]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meet_id, MeasurementMeetRequestData, options) {
            return exports.DosaAdminApiFp(configuration).postMeasurementMeet(meet_id, MeasurementMeetRequestData, options)(axios, basePath);
        },
        /**
         *
         * @summary テストメール送信
         * @param {InlineObject} [InlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(InlineObject, options) {
            return exports.DosaAdminApiFp(configuration).postSendTestMail(InlineObject, options)(axios, basePath);
        },
    };
};
/**
 * DosaAdminApi - object-oriented interface
 * @export
 * @class DosaAdminApi
 * @extends {BaseAPI}
 */
class DosaAdminApi extends base_1.BaseAPI {
    /**
     *
     * @summary 測定結果取得
     * @param {number} participant_id 測定者ID
     * @param {number} meet_id 測定会ID
     * @param {number} measurement_id 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurement(participant_id, meet_id, measurement_id, options) {
        return exports.DosaAdminApiFp(this.configuration).getMeasurement(participant_id, meet_id, measurement_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 測定会取得
     * @param {number} meet_id 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementMeet(meet_id, options) {
        return exports.DosaAdminApiFp(this.configuration).getMeasurementMeet(meet_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 申込み測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {number} [meet_id] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementMeetRequest(participant_id, meet_id, options) {
        return exports.DosaAdminApiFp(this.configuration).getMeasurementMeetRequest(participant_id, meet_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 測定会一覧取得
     * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementMeets(status, options) {
        return exports.DosaAdminApiFp(this.configuration).getMeasurementMeets(status, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} [mail_address] メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getParticipants(mail_address, options) {
        return exports.DosaAdminApiFp(this.configuration).getParticipants(mail_address, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 参加測定会一覧取得
     * @param {number} participant_id 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getParticipatedMeasurementMeets(participant_id, options) {
        return exports.DosaAdminApiFp(this.configuration).getParticipatedMeasurementMeets(participant_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ランキング一覧取得
     * @param {1 | 2 | 3 | 4} [rank_range] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getRankings(rank_range, sex, options) {
        return exports.DosaAdminApiFp(this.configuration).getRankings(rank_range, sex, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 測定会申込み
     * @param {number} meet_id 測定会ID
     * @param {MeasurementMeetRequestData} [MeasurementMeetRequestData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    postMeasurementMeet(meet_id, MeasurementMeetRequestData, options) {
        return exports.DosaAdminApiFp(this.configuration).postMeasurementMeet(meet_id, MeasurementMeetRequestData, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary テストメール送信
     * @param {InlineObject} [InlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    postSendTestMail(InlineObject, options) {
        return exports.DosaAdminApiFp(this.configuration).postSendTestMail(InlineObject, options)(this.axios, this.basePath);
    }
}
exports.DosaAdminApi = DosaAdminApi;
