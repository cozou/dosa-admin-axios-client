"use strict";
// tslint:disable
/**
 * DOSA管理API
 * RESTful API of DOSA管理システム
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var InlineObject4StatusEnum;
(function (InlineObject4StatusEnum) {
    InlineObject4StatusEnum["_0"] = "0";
    InlineObject4StatusEnum["_1"] = "1";
    InlineObject4StatusEnum["_2"] = "2";
    InlineObject4StatusEnum["_3"] = "3";
})(InlineObject4StatusEnum = exports.InlineObject4StatusEnum || (exports.InlineObject4StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineObject7SexEnum;
(function (InlineObject7SexEnum) {
    InlineObject7SexEnum["\u7537\u6027"] = "\u7537\u6027";
    InlineObject7SexEnum["\u5973\u6027"] = "\u5973\u6027";
})(InlineObject7SexEnum = exports.InlineObject7SexEnum || (exports.InlineObject7SexEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineObject7EnduranceLongSelfEnum;
(function (InlineObject7EnduranceLongSelfEnum) {
    InlineObject7EnduranceLongSelfEnum["_1"] = "1";
    InlineObject7EnduranceLongSelfEnum["_2"] = "2";
    InlineObject7EnduranceLongSelfEnum["_3"] = "3";
    InlineObject7EnduranceLongSelfEnum["_4"] = "4";
    InlineObject7EnduranceLongSelfEnum["_5"] = "5";
})(InlineObject7EnduranceLongSelfEnum = exports.InlineObject7EnduranceLongSelfEnum || (exports.InlineObject7EnduranceLongSelfEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineObject8TypeEnum;
(function (InlineObject8TypeEnum) {
    InlineObject8TypeEnum["DASH10"] = "DASH_10";
    InlineObject8TypeEnum["JUMP"] = "JUMP";
    InlineObject8TypeEnum["AGILITY"] = "AGILITY";
    InlineObject8TypeEnum["STEPVISUALRESPONSE"] = "STEP_VISUAL_RESPONSE";
    InlineObject8TypeEnum["STEPPOWER"] = "STEP_POWER";
    InlineObject8TypeEnum["SWINGSPEED"] = "SWING_SPEED";
    InlineObject8TypeEnum["BALANCEL"] = "BALANCE_L";
    InlineObject8TypeEnum["BALANCER"] = "BALANCE_R";
    InlineObject8TypeEnum["BALANCELRDIFFERENCE"] = "BALANCE_LR_DIFFERENCE";
    InlineObject8TypeEnum["ENDURANCELONG"] = "ENDURANCE_LONG";
    InlineObject8TypeEnum["ENDURANCESHORT"] = "ENDURANCE_SHORT";
})(InlineObject8TypeEnum = exports.InlineObject8TypeEnum || (exports.InlineObject8TypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineObject8SexEnum;
(function (InlineObject8SexEnum) {
    InlineObject8SexEnum["_1"] = "1";
    InlineObject8SexEnum["_2"] = "2";
})(InlineObject8SexEnum = exports.InlineObject8SexEnum || (exports.InlineObject8SexEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineObject8OrderEnum;
(function (InlineObject8OrderEnum) {
    InlineObject8OrderEnum["Asc"] = "asc";
    InlineObject8OrderEnum["Desc"] = "desc";
})(InlineObject8OrderEnum = exports.InlineObject8OrderEnum || (exports.InlineObject8OrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse200StatusEnum;
(function (InlineResponse200StatusEnum) {
    InlineResponse200StatusEnum["_200"] = "200";
    InlineResponse200StatusEnum["_402"] = "402";
})(InlineResponse200StatusEnum = exports.InlineResponse200StatusEnum || (exports.InlineResponse200StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2001StatusEnum;
(function (InlineResponse2001StatusEnum) {
    InlineResponse2001StatusEnum["_200"] = "200";
    InlineResponse2001StatusEnum["_404"] = "404";
})(InlineResponse2001StatusEnum = exports.InlineResponse2001StatusEnum || (exports.InlineResponse2001StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2001DataSEXEnum;
(function (InlineResponse2001DataSEXEnum) {
    InlineResponse2001DataSEXEnum["\u7537\u6027"] = "\u7537\u6027";
    InlineResponse2001DataSEXEnum["\u5973\u6027"] = "\u5973\u6027";
})(InlineResponse2001DataSEXEnum = exports.InlineResponse2001DataSEXEnum || (exports.InlineResponse2001DataSEXEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2002StatusEnum;
(function (InlineResponse2002StatusEnum) {
    InlineResponse2002StatusEnum["_200"] = "200";
    InlineResponse2002StatusEnum["_404"] = "404";
})(InlineResponse2002StatusEnum = exports.InlineResponse2002StatusEnum || (exports.InlineResponse2002StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2003StatusEnum;
(function (InlineResponse2003StatusEnum) {
    InlineResponse2003StatusEnum["_200"] = "200";
    InlineResponse2003StatusEnum["_404"] = "404";
})(InlineResponse2003StatusEnum = exports.InlineResponse2003StatusEnum || (exports.InlineResponse2003StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2003DataSEXEnum;
(function (InlineResponse2003DataSEXEnum) {
    InlineResponse2003DataSEXEnum["\u7537\u6027"] = "\u7537\u6027";
    InlineResponse2003DataSEXEnum["\u5973\u6027"] = "\u5973\u6027";
})(InlineResponse2003DataSEXEnum = exports.InlineResponse2003DataSEXEnum || (exports.InlineResponse2003DataSEXEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2004StatusEnum;
(function (InlineResponse2004StatusEnum) {
    InlineResponse2004StatusEnum["_200"] = "200";
    InlineResponse2004StatusEnum["_404"] = "404";
})(InlineResponse2004StatusEnum = exports.InlineResponse2004StatusEnum || (exports.InlineResponse2004StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2004DataSTATUSEnum;
(function (InlineResponse2004DataSTATUSEnum) {
    InlineResponse2004DataSTATUSEnum["_0"] = "0";
    InlineResponse2004DataSTATUSEnum["_1"] = "1";
    InlineResponse2004DataSTATUSEnum["_2"] = "2";
    InlineResponse2004DataSTATUSEnum["_3"] = "3";
})(InlineResponse2004DataSTATUSEnum = exports.InlineResponse2004DataSTATUSEnum || (exports.InlineResponse2004DataSTATUSEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2005StatusEnum;
(function (InlineResponse2005StatusEnum) {
    InlineResponse2005StatusEnum["_200"] = "200";
    InlineResponse2005StatusEnum["_404"] = "404";
})(InlineResponse2005StatusEnum = exports.InlineResponse2005StatusEnum || (exports.InlineResponse2005StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2005DataSTATUSEnum;
(function (InlineResponse2005DataSTATUSEnum) {
    InlineResponse2005DataSTATUSEnum[InlineResponse2005DataSTATUSEnum["NUMBER_0"] = 0] = "NUMBER_0";
    InlineResponse2005DataSTATUSEnum[InlineResponse2005DataSTATUSEnum["NUMBER_1"] = 1] = "NUMBER_1";
    InlineResponse2005DataSTATUSEnum[InlineResponse2005DataSTATUSEnum["NUMBER_2"] = 2] = "NUMBER_2";
    InlineResponse2005DataSTATUSEnum[InlineResponse2005DataSTATUSEnum["NUMBER_3"] = 3] = "NUMBER_3";
})(InlineResponse2005DataSTATUSEnum = exports.InlineResponse2005DataSTATUSEnum || (exports.InlineResponse2005DataSTATUSEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2006StatusEnum;
(function (InlineResponse2006StatusEnum) {
    InlineResponse2006StatusEnum["_200"] = "200";
    InlineResponse2006StatusEnum["_404"] = "404";
})(InlineResponse2006StatusEnum = exports.InlineResponse2006StatusEnum || (exports.InlineResponse2006StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2006DataISWINEnum;
(function (InlineResponse2006DataISWINEnum) {
    InlineResponse2006DataISWINEnum[InlineResponse2006DataISWINEnum["NUMBER_1"] = 1] = "NUMBER_1";
    InlineResponse2006DataISWINEnum[InlineResponse2006DataISWINEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(InlineResponse2006DataISWINEnum = exports.InlineResponse2006DataISWINEnum || (exports.InlineResponse2006DataISWINEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2006DataSTATUSEnum;
(function (InlineResponse2006DataSTATUSEnum) {
    InlineResponse2006DataSTATUSEnum["_1"] = "1";
    InlineResponse2006DataSTATUSEnum["_2"] = "2";
    InlineResponse2006DataSTATUSEnum["_3"] = "3";
    InlineResponse2006DataSTATUSEnum["_4"] = "4";
})(InlineResponse2006DataSTATUSEnum = exports.InlineResponse2006DataSTATUSEnum || (exports.InlineResponse2006DataSTATUSEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2007StatusEnum;
(function (InlineResponse2007StatusEnum) {
    InlineResponse2007StatusEnum["_200"] = "200";
    InlineResponse2007StatusEnum["_404"] = "404";
})(InlineResponse2007StatusEnum = exports.InlineResponse2007StatusEnum || (exports.InlineResponse2007StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2008StatusEnum;
(function (InlineResponse2008StatusEnum) {
    InlineResponse2008StatusEnum["_200"] = "200";
    InlineResponse2008StatusEnum["_404"] = "404";
})(InlineResponse2008StatusEnum = exports.InlineResponse2008StatusEnum || (exports.InlineResponse2008StatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
var InlineResponse2008DataSEXEnum;
(function (InlineResponse2008DataSEXEnum) {
    InlineResponse2008DataSEXEnum["\u7537\u6027"] = "\u7537\u6027";
    InlineResponse2008DataSEXEnum["\u5973\u6027"] = "\u5973\u6027";
})(InlineResponse2008DataSEXEnum = exports.InlineResponse2008DataSEXEnum || (exports.InlineResponse2008DataSEXEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementListSTATUSEnum;
(function (MeasurementListSTATUSEnum) {
    MeasurementListSTATUSEnum["_0"] = "0";
    MeasurementListSTATUSEnum["_1"] = "1";
    MeasurementListSTATUSEnum["_2"] = "2";
    MeasurementListSTATUSEnum["_3"] = "3";
})(MeasurementListSTATUSEnum = exports.MeasurementListSTATUSEnum || (exports.MeasurementListSTATUSEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementMeetRequestISWINEnum;
(function (MeasurementMeetRequestISWINEnum) {
    MeasurementMeetRequestISWINEnum[MeasurementMeetRequestISWINEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementMeetRequestISWINEnum[MeasurementMeetRequestISWINEnum["NUMBER_2"] = 2] = "NUMBER_2";
})(MeasurementMeetRequestISWINEnum = exports.MeasurementMeetRequestISWINEnum || (exports.MeasurementMeetRequestISWINEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementMeetRequestSTATUSEnum;
(function (MeasurementMeetRequestSTATUSEnum) {
    MeasurementMeetRequestSTATUSEnum["_1"] = "1";
    MeasurementMeetRequestSTATUSEnum["_2"] = "2";
    MeasurementMeetRequestSTATUSEnum["_3"] = "3";
    MeasurementMeetRequestSTATUSEnum["_4"] = "4";
})(MeasurementMeetRequestSTATUSEnum = exports.MeasurementMeetRequestSTATUSEnum || (exports.MeasurementMeetRequestSTATUSEnum = {}));
/**
    * @export
    * @enum {string}
    */
var MeasurementSingleSTATUSEnum;
(function (MeasurementSingleSTATUSEnum) {
    MeasurementSingleSTATUSEnum[MeasurementSingleSTATUSEnum["NUMBER_0"] = 0] = "NUMBER_0";
    MeasurementSingleSTATUSEnum[MeasurementSingleSTATUSEnum["NUMBER_1"] = 1] = "NUMBER_1";
    MeasurementSingleSTATUSEnum[MeasurementSingleSTATUSEnum["NUMBER_2"] = 2] = "NUMBER_2";
    MeasurementSingleSTATUSEnum[MeasurementSingleSTATUSEnum["NUMBER_3"] = 3] = "NUMBER_3";
})(MeasurementSingleSTATUSEnum = exports.MeasurementSingleSTATUSEnum || (exports.MeasurementSingleSTATUSEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ParticipantSEXEnum;
(function (ParticipantSEXEnum) {
    ParticipantSEXEnum["\u7537\u6027"] = "\u7537\u6027";
    ParticipantSEXEnum["\u5973\u6027"] = "\u5973\u6027";
})(ParticipantSEXEnum = exports.ParticipantSEXEnum || (exports.ParticipantSEXEnum = {}));
/**
    * @export
    * @enum {string}
    */
var ReportSEXEnum;
(function (ReportSEXEnum) {
    ReportSEXEnum["\u7537\u6027"] = "\u7537\u6027";
    ReportSEXEnum["\u5973\u6027"] = "\u5973\u6027";
})(ReportSEXEnum = exports.ReportSEXEnum || (exports.ReportSEXEnum = {}));
/**
 * DosaAdminApi - axios parameter creator
 * @export
 */
exports.DosaAdminApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 参加測定会一覧情報取得
         * @param {string} participant_id 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participant_id, options = {}) {
            // verify required parameter 'participant_id' is not null or undefined
            if (participant_id === null || participant_id === undefined) {
                throw new base_1.RequiredError('participant_id', 'Required parameter participant_id was null or undefined when calling getMeasurement.');
            }
            const localVarPath = `/sp/if/measurement.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (participant_id !== undefined) {
                localVarFormParams.set('participant_id', participant_id);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 測定会一覧取得
         * @param {string} status 測定会ステータス 1&#x3D;受付中 2&#x3D;受付終了 0&#x3D;だと両方 3&#x3D;だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementList(status, options = {}) {
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new base_1.RequiredError('status', 'Required parameter status was null or undefined when calling getMeasurementList.');
            }
            const localVarPath = `/sp/if/measurement_list.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (status !== undefined) {
                localVarFormParams.set('status', status);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 申し込み測定会一覧取得
         * @param {string} participant_id 測定者ID
         * @param {string} [meet_id] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participant_id, meet_id, options = {}) {
            // verify required parameter 'participant_id' is not null or undefined
            if (participant_id === null || participant_id === undefined) {
                throw new base_1.RequiredError('participant_id', 'Required parameter participant_id was null or undefined when calling getMeasurementMeetRequest.');
            }
            const localVarPath = `/sp/if/measurement_meet_request.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (participant_id !== undefined) {
                localVarFormParams.set('participant_id', participant_id);
            }
            if (meet_id !== undefined) {
                localVarFormParams.set('meet_id', meet_id);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 測定会単発情報取得
         * @param {string} meet_id 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementSingle(meet_id, options = {}) {
            // verify required parameter 'meet_id' is not null or undefined
            if (meet_id === null || meet_id === undefined) {
                throw new base_1.RequiredError('meet_id', 'Required parameter meet_id was null or undefined when calling getMeasurementSingle.');
            }
            const localVarPath = `/sp/if/measurement_single.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (meet_id !== undefined) {
                localVarFormParams.set('meet_id', meet_id);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 測定者情報一覧取得
         * @param {string} mail_address メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mail_address, options = {}) {
            // verify required parameter 'mail_address' is not null or undefined
            if (mail_address === null || mail_address === undefined) {
                throw new base_1.RequiredError('mail_address', 'Required parameter mail_address was null or undefined when calling getParticipants.');
            }
            const localVarPath = `/sp/if/participants.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (mail_address !== undefined) {
                localVarFormParams.set('mail_address', mail_address);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary ランキング取得
         * @param {string} type ランキング対象
         * @param {string} age_start 何歳から
         * @param {string} age_end 何歳まで
         * @param {string} sex 性別(1:男性, 2:女性)
         * @param {string} order 並び替え(asc:早い順, dsec:遅い順)
         * @param {string} topnum 欲しい件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanking(type, age_start, age_end, sex, order, topnum, options = {}) {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new base_1.RequiredError('type', 'Required parameter type was null or undefined when calling getRanking.');
            }
            // verify required parameter 'age_start' is not null or undefined
            if (age_start === null || age_start === undefined) {
                throw new base_1.RequiredError('age_start', 'Required parameter age_start was null or undefined when calling getRanking.');
            }
            // verify required parameter 'age_end' is not null or undefined
            if (age_end === null || age_end === undefined) {
                throw new base_1.RequiredError('age_end', 'Required parameter age_end was null or undefined when calling getRanking.');
            }
            // verify required parameter 'sex' is not null or undefined
            if (sex === null || sex === undefined) {
                throw new base_1.RequiredError('sex', 'Required parameter sex was null or undefined when calling getRanking.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new base_1.RequiredError('order', 'Required parameter order was null or undefined when calling getRanking.');
            }
            // verify required parameter 'topnum' is not null or undefined
            if (topnum === null || topnum === undefined) {
                throw new base_1.RequiredError('topnum', 'Required parameter topnum was null or undefined when calling getRanking.');
            }
            const localVarPath = `/sp/if/ranking.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (type !== undefined) {
                localVarFormParams.set('type', type);
            }
            if (age_start !== undefined) {
                localVarFormParams.set('age_start', age_start);
            }
            if (age_end !== undefined) {
                localVarFormParams.set('age_end', age_end);
            }
            if (sex !== undefined) {
                localVarFormParams.set('sex', sex);
            }
            if (order !== undefined) {
                localVarFormParams.set('order', order);
            }
            if (topnum !== undefined) {
                localVarFormParams.set('topnum', topnum);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary レポート情報取得
         * @param {string} participant_id 測定者ID
         * @param {string} meet_id 測定会ID
         * @param {string} measurement_id 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport(participant_id, meet_id, measurement_id, options = {}) {
            // verify required parameter 'participant_id' is not null or undefined
            if (participant_id === null || participant_id === undefined) {
                throw new base_1.RequiredError('participant_id', 'Required parameter participant_id was null or undefined when calling getReport.');
            }
            // verify required parameter 'meet_id' is not null or undefined
            if (meet_id === null || meet_id === undefined) {
                throw new base_1.RequiredError('meet_id', 'Required parameter meet_id was null or undefined when calling getReport.');
            }
            // verify required parameter 'measurement_id' is not null or undefined
            if (measurement_id === null || measurement_id === undefined) {
                throw new base_1.RequiredError('measurement_id', 'Required parameter measurement_id was null or undefined when calling getReport.');
            }
            const localVarPath = `/sp/if/report.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (participant_id !== undefined) {
                localVarFormParams.set('participant_id', participant_id);
            }
            if (meet_id !== undefined) {
                localVarFormParams.set('meet_id', meet_id);
            }
            if (measurement_id !== undefined) {
                localVarFormParams.set('measurement_id', measurement_id);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 会員登録（測定会申し込み）
         * @param {string} meet_id 測定会ID
         * @param {string} participant_name 名前
         * @param {string} participant_name_kana 名前（カナ）
         * @param {string} parent_name1 保護者氏名（保護者のメールアドレスの場合）
         * @param {string} parent_name2 保護者氏名（プライバシーポリシーに同意）
         * @param {string} mail_address メールアドレス
         * @param {string} zipcode1 郵便番号（3桁）
         * @param {string} zipcode2 郵便番号（4桁）
         * @param {string} address 住所
         * @param {string} telephone 電話番号
         * @param {string} sex 性別
         * @param {string} birthday1 生年月日（年）
         * @param {string} birthday2 生年月日（月：頭のゼロは不要）
         * @param {string} birthday3 生年月日（日：頭のゼロは不要）
         * @param {string} first_hope_time 希望測定開始時間1
         * @param {string} second_hope_time 希望測定開始時間2
         * @param {string} third_hope_time 希望測定開始時間3
         * @param {string} sports_type 習ったスポーツ（カンマ区切り）
         * @param {string} school_name 学校名
         * @param {string} team_name チーム名
         * @param {string} height 身長（cm）
         * @param {string} weight 体重（kg）
         * @param {string} endurance_long_self 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
         * @param {string} participate_time 参加回数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meet_id, participant_name, participant_name_kana, parent_name1, parent_name2, mail_address, zipcode1, zipcode2, address, telephone, sex, birthday1, birthday2, birthday3, first_hope_time, second_hope_time, third_hope_time, sports_type, school_name, team_name, height, weight, endurance_long_self, participate_time, options = {}) {
            // verify required parameter 'meet_id' is not null or undefined
            if (meet_id === null || meet_id === undefined) {
                throw new base_1.RequiredError('meet_id', 'Required parameter meet_id was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'participant_name' is not null or undefined
            if (participant_name === null || participant_name === undefined) {
                throw new base_1.RequiredError('participant_name', 'Required parameter participant_name was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'participant_name_kana' is not null or undefined
            if (participant_name_kana === null || participant_name_kana === undefined) {
                throw new base_1.RequiredError('participant_name_kana', 'Required parameter participant_name_kana was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'parent_name1' is not null or undefined
            if (parent_name1 === null || parent_name1 === undefined) {
                throw new base_1.RequiredError('parent_name1', 'Required parameter parent_name1 was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'parent_name2' is not null or undefined
            if (parent_name2 === null || parent_name2 === undefined) {
                throw new base_1.RequiredError('parent_name2', 'Required parameter parent_name2 was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'mail_address' is not null or undefined
            if (mail_address === null || mail_address === undefined) {
                throw new base_1.RequiredError('mail_address', 'Required parameter mail_address was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'zipcode1' is not null or undefined
            if (zipcode1 === null || zipcode1 === undefined) {
                throw new base_1.RequiredError('zipcode1', 'Required parameter zipcode1 was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'zipcode2' is not null or undefined
            if (zipcode2 === null || zipcode2 === undefined) {
                throw new base_1.RequiredError('zipcode2', 'Required parameter zipcode2 was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new base_1.RequiredError('address', 'Required parameter address was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'telephone' is not null or undefined
            if (telephone === null || telephone === undefined) {
                throw new base_1.RequiredError('telephone', 'Required parameter telephone was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'sex' is not null or undefined
            if (sex === null || sex === undefined) {
                throw new base_1.RequiredError('sex', 'Required parameter sex was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'birthday1' is not null or undefined
            if (birthday1 === null || birthday1 === undefined) {
                throw new base_1.RequiredError('birthday1', 'Required parameter birthday1 was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'birthday2' is not null or undefined
            if (birthday2 === null || birthday2 === undefined) {
                throw new base_1.RequiredError('birthday2', 'Required parameter birthday2 was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'birthday3' is not null or undefined
            if (birthday3 === null || birthday3 === undefined) {
                throw new base_1.RequiredError('birthday3', 'Required parameter birthday3 was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'first_hope_time' is not null or undefined
            if (first_hope_time === null || first_hope_time === undefined) {
                throw new base_1.RequiredError('first_hope_time', 'Required parameter first_hope_time was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'second_hope_time' is not null or undefined
            if (second_hope_time === null || second_hope_time === undefined) {
                throw new base_1.RequiredError('second_hope_time', 'Required parameter second_hope_time was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'third_hope_time' is not null or undefined
            if (third_hope_time === null || third_hope_time === undefined) {
                throw new base_1.RequiredError('third_hope_time', 'Required parameter third_hope_time was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'sports_type' is not null or undefined
            if (sports_type === null || sports_type === undefined) {
                throw new base_1.RequiredError('sports_type', 'Required parameter sports_type was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'school_name' is not null or undefined
            if (school_name === null || school_name === undefined) {
                throw new base_1.RequiredError('school_name', 'Required parameter school_name was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'team_name' is not null or undefined
            if (team_name === null || team_name === undefined) {
                throw new base_1.RequiredError('team_name', 'Required parameter team_name was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new base_1.RequiredError('height', 'Required parameter height was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'weight' is not null or undefined
            if (weight === null || weight === undefined) {
                throw new base_1.RequiredError('weight', 'Required parameter weight was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'endurance_long_self' is not null or undefined
            if (endurance_long_self === null || endurance_long_self === undefined) {
                throw new base_1.RequiredError('endurance_long_self', 'Required parameter endurance_long_self was null or undefined when calling postMeasurementMeet.');
            }
            // verify required parameter 'participate_time' is not null or undefined
            if (participate_time === null || participate_time === undefined) {
                throw new base_1.RequiredError('participate_time', 'Required parameter participate_time was null or undefined when calling postMeasurementMeet.');
            }
            const localVarPath = `/sp/if/measurement_meet.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (meet_id !== undefined) {
                localVarFormParams.set('meet_id', meet_id);
            }
            if (participant_name !== undefined) {
                localVarFormParams.set('participant_name', participant_name);
            }
            if (participant_name_kana !== undefined) {
                localVarFormParams.set('participant_name_kana', participant_name_kana);
            }
            if (parent_name1 !== undefined) {
                localVarFormParams.set('parent_name1', parent_name1);
            }
            if (parent_name2 !== undefined) {
                localVarFormParams.set('parent_name2', parent_name2);
            }
            if (mail_address !== undefined) {
                localVarFormParams.set('mail_address', mail_address);
            }
            if (zipcode1 !== undefined) {
                localVarFormParams.set('zipcode1', zipcode1);
            }
            if (zipcode2 !== undefined) {
                localVarFormParams.set('zipcode2', zipcode2);
            }
            if (address !== undefined) {
                localVarFormParams.set('address', address);
            }
            if (telephone !== undefined) {
                localVarFormParams.set('telephone', telephone);
            }
            if (sex !== undefined) {
                localVarFormParams.set('sex', sex);
            }
            if (birthday1 !== undefined) {
                localVarFormParams.set('birthday1', birthday1);
            }
            if (birthday2 !== undefined) {
                localVarFormParams.set('birthday2', birthday2);
            }
            if (birthday3 !== undefined) {
                localVarFormParams.set('birthday3', birthday3);
            }
            if (first_hope_time !== undefined) {
                localVarFormParams.set('first_hope_time', first_hope_time);
            }
            if (second_hope_time !== undefined) {
                localVarFormParams.set('second_hope_time', second_hope_time);
            }
            if (third_hope_time !== undefined) {
                localVarFormParams.set('third_hope_time', third_hope_time);
            }
            if (sports_type !== undefined) {
                localVarFormParams.set('sports_type', sports_type);
            }
            if (school_name !== undefined) {
                localVarFormParams.set('school_name', school_name);
            }
            if (team_name !== undefined) {
                localVarFormParams.set('team_name', team_name);
            }
            if (height !== undefined) {
                localVarFormParams.set('height', height);
            }
            if (weight !== undefined) {
                localVarFormParams.set('weight', weight);
            }
            if (endurance_long_self !== undefined) {
                localVarFormParams.set('endurance_long_self', endurance_long_self);
            }
            if (participate_time !== undefined) {
                localVarFormParams.set('participate_time', participate_time);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary テストメール送信
         * @param {string} mail_address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(mail_address, options = {}) {
            // verify required parameter 'mail_address' is not null or undefined
            if (mail_address === null || mail_address === undefined) {
                throw new base_1.RequiredError('mail_address', 'Required parameter mail_address was null or undefined when calling postSendTestMail.');
            }
            const localVarPath = `/sp/if/send_test_mail.php`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (mail_address !== undefined) {
                localVarFormParams.set('mail_address', mail_address);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DosaAdminApi - functional programming interface
 * @export
 */
exports.DosaAdminApiFp = function (configuration) {
    return {
        /**
         *
         * @summary 参加測定会一覧情報取得
         * @param {string} participant_id 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participant_id, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getMeasurement(participant_id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 測定会一覧取得
         * @param {string} status 測定会ステータス 1&#x3D;受付中 2&#x3D;受付終了 0&#x3D;だと両方 3&#x3D;だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementList(status, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getMeasurementList(status, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 申し込み測定会一覧取得
         * @param {string} participant_id 測定者ID
         * @param {string} [meet_id] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participant_id, meet_id, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getMeasurementMeetRequest(participant_id, meet_id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 測定会単発情報取得
         * @param {string} meet_id 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementSingle(meet_id, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getMeasurementSingle(meet_id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 測定者情報一覧取得
         * @param {string} mail_address メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mail_address, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getParticipants(mail_address, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary ランキング取得
         * @param {string} type ランキング対象
         * @param {string} age_start 何歳から
         * @param {string} age_end 何歳まで
         * @param {string} sex 性別(1:男性, 2:女性)
         * @param {string} order 並び替え(asc:早い順, dsec:遅い順)
         * @param {string} topnum 欲しい件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanking(type, age_start, age_end, sex, order, topnum, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getRanking(type, age_start, age_end, sex, order, topnum, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary レポート情報取得
         * @param {string} participant_id 測定者ID
         * @param {string} meet_id 測定会ID
         * @param {string} measurement_id 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport(participant_id, meet_id, measurement_id, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).getReport(participant_id, meet_id, measurement_id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 会員登録（測定会申し込み）
         * @param {string} meet_id 測定会ID
         * @param {string} participant_name 名前
         * @param {string} participant_name_kana 名前（カナ）
         * @param {string} parent_name1 保護者氏名（保護者のメールアドレスの場合）
         * @param {string} parent_name2 保護者氏名（プライバシーポリシーに同意）
         * @param {string} mail_address メールアドレス
         * @param {string} zipcode1 郵便番号（3桁）
         * @param {string} zipcode2 郵便番号（4桁）
         * @param {string} address 住所
         * @param {string} telephone 電話番号
         * @param {string} sex 性別
         * @param {string} birthday1 生年月日（年）
         * @param {string} birthday2 生年月日（月：頭のゼロは不要）
         * @param {string} birthday3 生年月日（日：頭のゼロは不要）
         * @param {string} first_hope_time 希望測定開始時間1
         * @param {string} second_hope_time 希望測定開始時間2
         * @param {string} third_hope_time 希望測定開始時間3
         * @param {string} sports_type 習ったスポーツ（カンマ区切り）
         * @param {string} school_name 学校名
         * @param {string} team_name チーム名
         * @param {string} height 身長（cm）
         * @param {string} weight 体重（kg）
         * @param {string} endurance_long_self 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
         * @param {string} participate_time 参加回数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meet_id, participant_name, participant_name_kana, parent_name1, parent_name2, mail_address, zipcode1, zipcode2, address, telephone, sex, birthday1, birthday2, birthday3, first_hope_time, second_hope_time, third_hope_time, sports_type, school_name, team_name, height, weight, endurance_long_self, participate_time, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).postMeasurementMeet(meet_id, participant_name, participant_name_kana, parent_name1, parent_name2, mail_address, zipcode1, zipcode2, address, telephone, sex, birthday1, birthday2, birthday3, first_hope_time, second_hope_time, third_hope_time, sports_type, school_name, team_name, height, weight, endurance_long_self, participate_time, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary テストメール送信
         * @param {string} mail_address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(mail_address, options) {
            const localVarAxiosArgs = exports.DosaAdminApiAxiosParamCreator(configuration).postSendTestMail(mail_address, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DosaAdminApi - factory interface
 * @export
 */
exports.DosaAdminApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary 参加測定会一覧情報取得
         * @param {string} participant_id 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participant_id, options) {
            return exports.DosaAdminApiFp(configuration).getMeasurement(participant_id, options)(axios, basePath);
        },
        /**
         *
         * @summary 測定会一覧取得
         * @param {string} status 測定会ステータス 1&#x3D;受付中 2&#x3D;受付終了 0&#x3D;だと両方 3&#x3D;だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementList(status, options) {
            return exports.DosaAdminApiFp(configuration).getMeasurementList(status, options)(axios, basePath);
        },
        /**
         *
         * @summary 申し込み測定会一覧取得
         * @param {string} participant_id 測定者ID
         * @param {string} [meet_id] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participant_id, meet_id, options) {
            return exports.DosaAdminApiFp(configuration).getMeasurementMeetRequest(participant_id, meet_id, options)(axios, basePath);
        },
        /**
         *
         * @summary 測定会単発情報取得
         * @param {string} meet_id 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementSingle(meet_id, options) {
            return exports.DosaAdminApiFp(configuration).getMeasurementSingle(meet_id, options)(axios, basePath);
        },
        /**
         *
         * @summary 測定者情報一覧取得
         * @param {string} mail_address メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mail_address, options) {
            return exports.DosaAdminApiFp(configuration).getParticipants(mail_address, options)(axios, basePath);
        },
        /**
         *
         * @summary ランキング取得
         * @param {string} type ランキング対象
         * @param {string} age_start 何歳から
         * @param {string} age_end 何歳まで
         * @param {string} sex 性別(1:男性, 2:女性)
         * @param {string} order 並び替え(asc:早い順, dsec:遅い順)
         * @param {string} topnum 欲しい件数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanking(type, age_start, age_end, sex, order, topnum, options) {
            return exports.DosaAdminApiFp(configuration).getRanking(type, age_start, age_end, sex, order, topnum, options)(axios, basePath);
        },
        /**
         *
         * @summary レポート情報取得
         * @param {string} participant_id 測定者ID
         * @param {string} meet_id 測定会ID
         * @param {string} measurement_id 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport(participant_id, meet_id, measurement_id, options) {
            return exports.DosaAdminApiFp(configuration).getReport(participant_id, meet_id, measurement_id, options)(axios, basePath);
        },
        /**
         *
         * @summary 会員登録（測定会申し込み）
         * @param {string} meet_id 測定会ID
         * @param {string} participant_name 名前
         * @param {string} participant_name_kana 名前（カナ）
         * @param {string} parent_name1 保護者氏名（保護者のメールアドレスの場合）
         * @param {string} parent_name2 保護者氏名（プライバシーポリシーに同意）
         * @param {string} mail_address メールアドレス
         * @param {string} zipcode1 郵便番号（3桁）
         * @param {string} zipcode2 郵便番号（4桁）
         * @param {string} address 住所
         * @param {string} telephone 電話番号
         * @param {string} sex 性別
         * @param {string} birthday1 生年月日（年）
         * @param {string} birthday2 生年月日（月：頭のゼロは不要）
         * @param {string} birthday3 生年月日（日：頭のゼロは不要）
         * @param {string} first_hope_time 希望測定開始時間1
         * @param {string} second_hope_time 希望測定開始時間2
         * @param {string} third_hope_time 希望測定開始時間3
         * @param {string} sports_type 習ったスポーツ（カンマ区切り）
         * @param {string} school_name 学校名
         * @param {string} team_name チーム名
         * @param {string} height 身長（cm）
         * @param {string} weight 体重（kg）
         * @param {string} endurance_long_self 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
         * @param {string} participate_time 参加回数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meet_id, participant_name, participant_name_kana, parent_name1, parent_name2, mail_address, zipcode1, zipcode2, address, telephone, sex, birthday1, birthday2, birthday3, first_hope_time, second_hope_time, third_hope_time, sports_type, school_name, team_name, height, weight, endurance_long_self, participate_time, options) {
            return exports.DosaAdminApiFp(configuration).postMeasurementMeet(meet_id, participant_name, participant_name_kana, parent_name1, parent_name2, mail_address, zipcode1, zipcode2, address, telephone, sex, birthday1, birthday2, birthday3, first_hope_time, second_hope_time, third_hope_time, sports_type, school_name, team_name, height, weight, endurance_long_self, participate_time, options)(axios, basePath);
        },
        /**
         *
         * @summary テストメール送信
         * @param {string} mail_address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(mail_address, options) {
            return exports.DosaAdminApiFp(configuration).postSendTestMail(mail_address, options)(axios, basePath);
        },
    };
};
/**
 * DosaAdminApi - object-oriented interface
 * @export
 * @class DosaAdminApi
 * @extends {BaseAPI}
 */
class DosaAdminApi extends base_1.BaseAPI {
    /**
     *
     * @summary 参加測定会一覧情報取得
     * @param {string} participant_id 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurement(participant_id, options) {
        return exports.DosaAdminApiFp(this.configuration).getMeasurement(participant_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 測定会一覧取得
     * @param {string} status 測定会ステータス 1&#x3D;受付中 2&#x3D;受付終了 0&#x3D;だと両方 3&#x3D;だと受付中＋ラベル印刷前+開始日が未来←残念ながら該当測定なし。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementList(status, options) {
        return exports.DosaAdminApiFp(this.configuration).getMeasurementList(status, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 申し込み測定会一覧取得
     * @param {string} participant_id 測定者ID
     * @param {string} [meet_id] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementMeetRequest(participant_id, meet_id, options) {
        return exports.DosaAdminApiFp(this.configuration).getMeasurementMeetRequest(participant_id, meet_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 測定会単発情報取得
     * @param {string} meet_id 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getMeasurementSingle(meet_id, options) {
        return exports.DosaAdminApiFp(this.configuration).getMeasurementSingle(meet_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 測定者情報一覧取得
     * @param {string} mail_address メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getParticipants(mail_address, options) {
        return exports.DosaAdminApiFp(this.configuration).getParticipants(mail_address, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary ランキング取得
     * @param {string} type ランキング対象
     * @param {string} age_start 何歳から
     * @param {string} age_end 何歳まで
     * @param {string} sex 性別(1:男性, 2:女性)
     * @param {string} order 並び替え(asc:早い順, dsec:遅い順)
     * @param {string} topnum 欲しい件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getRanking(type, age_start, age_end, sex, order, topnum, options) {
        return exports.DosaAdminApiFp(this.configuration).getRanking(type, age_start, age_end, sex, order, topnum, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary レポート情報取得
     * @param {string} participant_id 測定者ID
     * @param {string} meet_id 測定会ID
     * @param {string} measurement_id 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    getReport(participant_id, meet_id, measurement_id, options) {
        return exports.DosaAdminApiFp(this.configuration).getReport(participant_id, meet_id, measurement_id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary 会員登録（測定会申し込み）
     * @param {string} meet_id 測定会ID
     * @param {string} participant_name 名前
     * @param {string} participant_name_kana 名前（カナ）
     * @param {string} parent_name1 保護者氏名（保護者のメールアドレスの場合）
     * @param {string} parent_name2 保護者氏名（プライバシーポリシーに同意）
     * @param {string} mail_address メールアドレス
     * @param {string} zipcode1 郵便番号（3桁）
     * @param {string} zipcode2 郵便番号（4桁）
     * @param {string} address 住所
     * @param {string} telephone 電話番号
     * @param {string} sex 性別
     * @param {string} birthday1 生年月日（年）
     * @param {string} birthday2 生年月日（月：頭のゼロは不要）
     * @param {string} birthday3 生年月日（日：頭のゼロは不要）
     * @param {string} first_hope_time 希望測定開始時間1
     * @param {string} second_hope_time 希望測定開始時間2
     * @param {string} third_hope_time 希望測定開始時間3
     * @param {string} sports_type 習ったスポーツ（カンマ区切り）
     * @param {string} school_name 学校名
     * @param {string} team_name チーム名
     * @param {string} height 身長（cm）
     * @param {string} weight 体重（kg）
     * @param {string} endurance_long_self 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
     * @param {string} participate_time 参加回数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    postMeasurementMeet(meet_id, participant_name, participant_name_kana, parent_name1, parent_name2, mail_address, zipcode1, zipcode2, address, telephone, sex, birthday1, birthday2, birthday3, first_hope_time, second_hope_time, third_hope_time, sports_type, school_name, team_name, height, weight, endurance_long_self, participate_time, options) {
        return exports.DosaAdminApiFp(this.configuration).postMeasurementMeet(meet_id, participant_name, participant_name_kana, parent_name1, parent_name2, mail_address, zipcode1, zipcode2, address, telephone, sex, birthday1, birthday2, birthday3, first_hope_time, second_hope_time, third_hope_time, sports_type, school_name, team_name, height, weight, endurance_long_self, participate_time, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary テストメール送信
     * @param {string} mail_address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    postSendTestMail(mail_address, options) {
        return exports.DosaAdminApiFp(this.configuration).postSendTestMail(mail_address, options)(this.axios, this.basePath);
    }
}
exports.DosaAdminApi = DosaAdminApi;
