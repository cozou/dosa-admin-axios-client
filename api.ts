// tslint:disable
/**
 * DOSA管理API
 * RESTful API of DOSA管理システム
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    mailAddress?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Participant>}
     * @memberof InlineResponse200
     */
    data?: Array<Participant>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<ParticipantMeasurementMeet>}
     * @memberof InlineResponse2001
     */
    data?: Array<ParticipantMeasurementMeet>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Measurement}
     * @memberof InlineResponse2002
     */
    data?: Measurement;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<MeasurementMeet>}
     * @memberof InlineResponse2003
     */
    data?: Array<MeasurementMeet>;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * リクエストID
     * @type {number}
     * @memberof InlineResponse201
     */
    requestId?: number;
}
/**
 * 測定結果詳細
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     * 測定者ID
     * @type {number}
     * @memberof Measurement
     */
    participantId: number;
    /**
     * 測定会ID
     * @type {number}
     * @memberof Measurement
     */
    meetId: number;
    /**
     * 測定結果ID
     * @type {number}
     * @memberof Measurement
     */
    measurementId: number;
    /**
     * 測定会名
     * @type {string}
     * @memberof Measurement
     */
    meetName: string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof Measurement
     */
    startDate: string;
    /**
     * 名前
     * @type {string}
     * @memberof Measurement
     */
    name: string;
    /**
     * 性別（1:男性, 2:女性）
     * @type {number}
     * @memberof Measurement
     */
    sex: MeasurementSexEnum;
    /**
     * 学年
     * @type {string}
     * @memberof Measurement
     */
    grade: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof Measurement
     */
    birthday: string;
    /**
     * 参加回数
     * @type {number}
     * @memberof Measurement
     */
    participateTime: number;
    /**
     * 身長(cm)
     * @type {number}
     * @memberof Measurement
     */
    height: number;
    /**
     * 体重(kg)
     * @type {number}
     * @memberof Measurement
     */
    weight: number;
    /**
     * 習ったスポーツ
     * @type {Array<string>}
     * @memberof Measurement
     */
    sportsType: Array<string>;
    /**
     * その他の習ったスポーツ
     * @type {string}
     * @memberof Measurement
     */
    sportsTypeOther: string;
    /**
     * 所属チーム名
     * @type {string}
     * @memberof Measurement
     */
    teamName: string;
    /**
     * バージョン
     * @type {number}
     * @memberof Measurement
     */
    version: number;
    /**
     * 
     * @type {MeasurementResults}
     * @memberof Measurement
     */
    results: MeasurementResults;
    /**
     * 
     * @type {MeasurementAdvice}
     * @memberof Measurement
     */
    advice: MeasurementAdvice;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementSexEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * アドバイス
 * @export
 * @interface MeasurementAdvice
 */
export interface MeasurementAdvice {
    /**
     * 概要
     * @type {string}
     * @memberof MeasurementAdvice
     */
    summary: string;
    /**
     * 向いているスポーツ
     * @type {Array<string>}
     * @memberof MeasurementAdvice
     */
    recommendSports: Array<string>;
    /**
     * 活かせる能力（上位3つ）
     * @type {Array<MeasurementAdviceRecommendAbility>}
     * @memberof MeasurementAdvice
     */
    recommendAbility: Array<MeasurementAdviceRecommendAbility>;
}
/**
 * 活かせる能力
 * @export
 * @interface MeasurementAdviceRecommendAbility
 */
export interface MeasurementAdviceRecommendAbility {
    /**
     * 能力
     * @type {string}
     * @memberof MeasurementAdviceRecommendAbility
     */
    ability: string;
    /**
     * スポーツ
     * @type {string}
     * @memberof MeasurementAdviceRecommendAbility
     */
    sports: string;
}
/**
 * 能力測定データ
 * @export
 * @interface MeasurementData
 */
export interface MeasurementData {
    /**
     * 5段階評価
     * @type {number}
     * @memberof MeasurementData
     */
    grade: MeasurementDataGradeEnum;
    /**
     * 測定値
     * @type {number}
     * @memberof MeasurementData
     */
    score: number;
    /**
     * 全国ランキング
     * @type {number}
     * @memberof MeasurementData
     */
    rank: number;
    /**
     * 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @type {number}
     * @memberof MeasurementData
     */
    rankRange: MeasurementDataRankRangeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementDataGradeEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5
}
/**
    * @export
    * @enum {string}
    */
export enum MeasurementDataRankRangeEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}

/**
 * 申込受付中測定会
 * @export
 * @interface MeasurementMeet
 */
export interface MeasurementMeet {
    /**
     * 測定会ID
     * @type {number}
     * @memberof MeasurementMeet
     */
    meetId: number;
    /**
     * 測定会名
     * @type {string}
     * @memberof MeasurementMeet
     */
    meetName: string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof MeasurementMeet
     */
    startDate: string;
    /**
     * 開始時間
     * @type {Array<string>}
     * @memberof MeasurementMeet
     */
    startTime: Array<string>;
    /**
     * 測定会ステータス（1: 募集受付中, 2: 募集終了）
     * @type {number}
     * @memberof MeasurementMeet
     */
    status: MeasurementMeetStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementMeetStatusEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 申込受付中測定会
 * @export
 * @interface MeasurementMeetRequest
 */
export interface MeasurementMeetRequest {
    /**
     * リクエストID
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    requestId: number;
    /**
     * 測定会ID
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    meetId: number;
    /**
     * 測定者ID
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    participantId: number;
    /**
     * 第1希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    firstHopeTime: string;
    /**
     * 第2希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    secondHopeTime: string;
    /**
     * 第3希望時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    thirdHopeTime: string;
    /**
     * 当落選結果（1: 当選, 2: 落選）
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    isWin: MeasurementMeetRequestIsWinEnum;
    /**
     * 開始時間
     * @type {string}
     * @memberof MeasurementMeetRequest
     */
    startTime: string;
    /**
     * ステータス（1: 未応募, 2: 応募済み）
     * @type {number}
     * @memberof MeasurementMeetRequest
     */
    status: MeasurementMeetRequestStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementMeetRequestIsWinEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
    * @export
    * @enum {string}
    */
export enum MeasurementMeetRequestStatusEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 測定会申込み
 * @export
 * @interface MeasurementMeetRequestData
 */
export interface MeasurementMeetRequestData {
    /**
     * 名前
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    name: string;
    /**
     * 名前（カナ）
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    nameKana: string;
    /**
     * 性別（1:男性, 2:女性）
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    sex: MeasurementMeetRequestDataSexEnum;
    /**
     * 郵便番号1
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    zipCode1: string;
    /**
     * 郵便番号2
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    zipCode2: string;
    /**
     * 住所
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    address: string;
    /**
     * 電話番号
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    telephone: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    mailAddress: string;
    /**
     * 保護者氏名
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    parentName: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    birthday: string;
    /**
     * 希望測定開始時間1
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    firstHopeTime: string;
    /**
     * 希望測定開始時間2
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    secondHopeTime: string;
    /**
     * 希望測定開始時間3
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    thirdHopeTime: string;
    /**
     * 習ったスポーツ
     * @type {Array<string>}
     * @memberof MeasurementMeetRequestData
     */
    sportsType: Array<string>;
    /**
     * その他の習ったスポーツ
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    sportsTypeOther: string;
    /**
     * 学校名
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    schoolName: string;
    /**
     * 所属チーム
     * @type {string}
     * @memberof MeasurementMeetRequestData
     */
    teamName: string;
    /**
     * 身長(cm)
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    height: number;
    /**
     * 体重(kg)
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    weight: number;
    /**
     * 参加回数
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    participateTime: number;
    /**
     * 長距離走について（1: 非常に苦手, 2: 少し苦手, 3: 普通, 4: 少し得意, 5: 非常に得意）
     * @type {number}
     * @memberof MeasurementMeetRequestData
     */
    enduranceLongSelf: MeasurementMeetRequestDataEnduranceLongSelfEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementMeetRequestDataSexEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
    * @export
    * @enum {string}
    */
export enum MeasurementMeetRequestDataEnduranceLongSelfEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5
}

/**
 * 測定結果
 * @export
 * @interface MeasurementResults
 */
export interface MeasurementResults {
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    dash10?: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    enduranceLong?: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    enduranceShort?: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    jump: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    agility: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    stepVisualResponse?: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    stepPower?: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    swingSpeed?: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    balanceL?: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    balanceR?: MeasurementData;
    /**
     * 
     * @type {MeasurementData}
     * @memberof MeasurementResults
     */
    balanceLrDifference?: MeasurementData;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    messages: string;
}
/**
 * 測定者
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * 測定者ID
     * @type {number}
     * @memberof Participant
     */
    participantId: number;
    /**
     * 氏名
     * @type {string}
     * @memberof Participant
     */
    name: string;
    /**
     * 氏名（カナ）
     * @type {string}
     * @memberof Participant
     */
    nameKane?: string;
    /**
     * 性別（1:男性, 2:女性）
     * @type {number}
     * @memberof Participant
     */
    sex: ParticipantSexEnum;
    /**
     * 生年月日
     * @type {string}
     * @memberof Participant
     */
    birthday: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Participant
     */
    mailAddress: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ParticipantSexEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 参加測定会
 * @export
 * @interface ParticipantMeasurementMeet
 */
export interface ParticipantMeasurementMeet {
    /**
     * 測定者ID
     * @type {number}
     * @memberof ParticipantMeasurementMeet
     */
    participantId: number;
    /**
     * 測定会ID
     * @type {number}
     * @memberof ParticipantMeasurementMeet
     */
    meetId: number;
    /**
     * 測定結果ID
     * @type {number}
     * @memberof ParticipantMeasurementMeet
     */
    measurementId: number;
    /**
     * 測定会名
     * @type {string}
     * @memberof ParticipantMeasurementMeet
     */
    meetName: string;
    /**
     * 測定会実施日
     * @type {string}
     * @memberof ParticipantMeasurementMeet
     */
    startDate: string;
    /**
     * 開始時間
     * @type {string}
     * @memberof ParticipantMeasurementMeet
     */
    startTime: string;
}
/**
 * 
 * @export
 * @interface Ranking
 */
export interface Ranking {
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    dash10: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    enduranceLong: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    enduranceShort: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    jump: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    agility: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    stepVisualResponse: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    stepPower: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    swingSpeed: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    balanceL: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    balanceR: Array<RankingData>;
    /**
     * 
     * @type {Array<RankingData>}
     * @memberof Ranking
     */
    balanceLrDifference: Array<RankingData>;
}
/**
 * 
 * @export
 * @interface RankingData
 */
export interface RankingData {
    /**
     * 測定者名
     * @type {string}
     * @memberof RankingData
     */
    name: string;
    /**
     * 性別（1:男性, 2:女性）
     * @type {number}
     * @memberof RankingData
     */
    sex: RankingDataSexEnum;
    /**
     * 生年月日
     * @type {string}
     * @memberof RankingData
     */
    birthday: string;
    /**
     * 測定値
     * @type {number}
     * @memberof RankingData
     */
    score: number;
    /**
     * 全国ランキング
     * @type {number}
     * @memberof RankingData
     */
    rank: number;
    /**
     * 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @type {number}
     * @memberof RankingData
     */
    rankRange: RankingDataRankRangeEnum;
    /**
     * 測定会名
     * @type {string}
     * @memberof RankingData
     */
    meetName: string;
    /**
     * 測定者ID
     * @type {number}
     * @memberof RankingData
     */
    participantId: number;
    /**
     * 測定会ID
     * @type {number}
     * @memberof RankingData
     */
    meetId: number;
    /**
     * 測定結果ID
     * @type {number}
     * @memberof RankingData
     */
    measurementId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum RankingDataSexEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
    * @export
    * @enum {string}
    */
export enum RankingDataRankRangeEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}


/**
 * DosaAdminApi - axios parameter creator
 * @export
 */
export const DosaAdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 測定結果取得
         * @param {number} participantId 測定者ID
         * @param {number} meetId 測定会ID
         * @param {number} measurementId 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participantId: number, meetId: number, measurementId: number, options: any = {}): RequestArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getMeasurement.');
            }
            // verify required parameter 'meetId' is not null or undefined
            if (meetId === null || meetId === undefined) {
                throw new RequiredError('meetId','Required parameter meetId was null or undefined when calling getMeasurement.');
            }
            // verify required parameter 'measurementId' is not null or undefined
            if (measurementId === null || measurementId === undefined) {
                throw new RequiredError('measurementId','Required parameter measurementId was null or undefined when calling getMeasurement.');
            }
            const localVarPath = `/api/v1/participants/{participant_id}/measurement_meets/{meet_id}/measurements/{measurement_id}`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)))
                .replace(`{${"meet_id"}}`, encodeURIComponent(String(meetId)))
                .replace(`{${"measurement_id"}}`, encodeURIComponent(String(measurementId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 測定会取得
         * @param {number} meetId 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeet(meetId: number, options: any = {}): RequestArgs {
            // verify required parameter 'meetId' is not null or undefined
            if (meetId === null || meetId === undefined) {
                throw new RequiredError('meetId','Required parameter meetId was null or undefined when calling getMeasurementMeet.');
            }
            const localVarPath = `/api/v1/measurement_meets/{meet_id}`
                .replace(`{${"meet_id"}}`, encodeURIComponent(String(meetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 申込み測定会一覧取得
         * @param {number} participantId 測定者ID
         * @param {number} [meetId] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participantId: number, meetId?: number, options: any = {}): RequestArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getMeasurementMeetRequest.');
            }
            const localVarPath = `/api/v1/participants/{participant_id}/measurement_meet_requests`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (meetId !== undefined) {
                localVarQueryParameter['meet_id'] = meetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 測定会一覧取得
         * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeets(status?: 1 | 2, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/measurement_meets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 測定者情報一覧取得
         * @param {string} [mailAddress] メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mailAddress?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/participants`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (mailAddress !== undefined) {
                localVarQueryParameter['mail_address'] = mailAddress;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 参加測定会一覧取得
         * @param {number} participantId 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipatedMeasurementMeets(participantId: number, options: any = {}): RequestArgs {
            // verify required parameter 'participantId' is not null or undefined
            if (participantId === null || participantId === undefined) {
                throw new RequiredError('participantId','Required parameter participantId was null or undefined when calling getParticipatedMeasurementMeets.');
            }
            const localVarPath = `/api/v1/participants/{participant_id}/measurement_meets`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ランキング一覧取得
         * @param {1 | 2 | 3 | 4} [rankRange] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
         * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRankings(rankRange?: 1 | 2 | 3 | 4, sex?: 1 | 2, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/rankings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (rankRange !== undefined) {
                localVarQueryParameter['rank_range'] = rankRange;
            }

            if (sex !== undefined) {
                localVarQueryParameter['sex'] = sex;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 測定会申込み
         * @param {number} meetId 測定会ID
         * @param {MeasurementMeetRequestData} [measurementMeetRequestData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meetId: number, measurementMeetRequestData?: MeasurementMeetRequestData, options: any = {}): RequestArgs {
            // verify required parameter 'meetId' is not null or undefined
            if (meetId === null || meetId === undefined) {
                throw new RequiredError('meetId','Required parameter meetId was null or undefined when calling postMeasurementMeet.');
            }
            const localVarPath = `/api/v1/meaasuremnt_meets/{meet_id}`
                .replace(`{${"meet_id"}}`, encodeURIComponent(String(meetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof measurementMeetRequestData !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(measurementMeetRequestData !== undefined ? measurementMeetRequestData : {}) : (measurementMeetRequestData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テストメール送信
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(inlineObject?: InlineObject, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/send_test_mail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DosaAdminApi - functional programming interface
 * @export
 */
export const DosaAdminApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 測定結果取得
         * @param {number} participantId 測定者ID
         * @param {number} meetId 測定会ID
         * @param {number} measurementId 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participantId: number, meetId: number, measurementId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).getMeasurement(participantId, meetId, measurementId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 測定会取得
         * @param {number} meetId 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeet(meetId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeasurementMeet> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).getMeasurementMeet(meetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 申込み測定会一覧取得
         * @param {number} participantId 測定者ID
         * @param {number} [meetId] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participantId: number, meetId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeasurementMeetRequest> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).getMeasurementMeetRequest(participantId, meetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 測定会一覧取得
         * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeets(status?: 1 | 2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).getMeasurementMeets(status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 測定者情報一覧取得
         * @param {string} [mailAddress] メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mailAddress?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).getParticipants(mailAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 参加測定会一覧取得
         * @param {number} participantId 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipatedMeasurementMeets(participantId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).getParticipatedMeasurementMeets(participantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ランキング一覧取得
         * @param {1 | 2 | 3 | 4} [rankRange] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
         * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRankings(rankRange?: 1 | 2 | 3 | 4, sex?: 1 | 2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ranking> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).getRankings(rankRange, sex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 測定会申込み
         * @param {number} meetId 測定会ID
         * @param {MeasurementMeetRequestData} [measurementMeetRequestData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meetId: number, measurementMeetRequestData?: MeasurementMeetRequestData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).postMeasurementMeet(meetId, measurementMeetRequestData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary テストメール送信
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(inlineObject?: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DosaAdminApiAxiosParamCreator(configuration).postSendTestMail(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DosaAdminApi - factory interface
 * @export
 */
export const DosaAdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 測定結果取得
         * @param {number} participantId 測定者ID
         * @param {number} meetId 測定会ID
         * @param {number} measurementId 測定結果ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurement(participantId: number, meetId: number, measurementId: number, options?: any): AxiosPromise<InlineResponse2002> {
            return DosaAdminApiFp(configuration).getMeasurement(participantId, meetId, measurementId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 測定会取得
         * @param {number} meetId 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeet(meetId: number, options?: any): AxiosPromise<MeasurementMeet> {
            return DosaAdminApiFp(configuration).getMeasurementMeet(meetId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 申込み測定会一覧取得
         * @param {number} participantId 測定者ID
         * @param {number} [meetId] 測定会ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeetRequest(participantId: number, meetId?: number, options?: any): AxiosPromise<MeasurementMeetRequest> {
            return DosaAdminApiFp(configuration).getMeasurementMeetRequest(participantId, meetId, options)(axios, basePath);
        },
        /**
         * 
         * @summary 測定会一覧取得
         * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementMeets(status?: 1 | 2, options?: any): AxiosPromise<InlineResponse2003> {
            return DosaAdminApiFp(configuration).getMeasurementMeets(status, options)(axios, basePath);
        },
        /**
         * 
         * @summary 測定者情報一覧取得
         * @param {string} [mailAddress] メールアドレス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(mailAddress?: string, options?: any): AxiosPromise<InlineResponse200> {
            return DosaAdminApiFp(configuration).getParticipants(mailAddress, options)(axios, basePath);
        },
        /**
         * 
         * @summary 参加測定会一覧取得
         * @param {number} participantId 測定者ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipatedMeasurementMeets(participantId: number, options?: any): AxiosPromise<InlineResponse2001> {
            return DosaAdminApiFp(configuration).getParticipatedMeasurementMeets(participantId, options)(axios, basePath);
        },
        /**
         * 
         * @summary ランキング一覧取得
         * @param {1 | 2 | 3 | 4} [rankRange] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
         * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRankings(rankRange?: 1 | 2 | 3 | 4, sex?: 1 | 2, options?: any): AxiosPromise<Ranking> {
            return DosaAdminApiFp(configuration).getRankings(rankRange, sex, options)(axios, basePath);
        },
        /**
         * 
         * @summary 測定会申込み
         * @param {number} meetId 測定会ID
         * @param {MeasurementMeetRequestData} [measurementMeetRequestData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeasurementMeet(meetId: number, measurementMeetRequestData?: MeasurementMeetRequestData, options?: any): AxiosPromise<InlineResponse201> {
            return DosaAdminApiFp(configuration).postMeasurementMeet(meetId, measurementMeetRequestData, options)(axios, basePath);
        },
        /**
         * 
         * @summary テストメール送信
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSendTestMail(inlineObject?: InlineObject, options?: any): AxiosPromise<void> {
            return DosaAdminApiFp(configuration).postSendTestMail(inlineObject, options)(axios, basePath);
        },
    };
};

/**
 * DosaAdminApi - object-oriented interface
 * @export
 * @class DosaAdminApi
 * @extends {BaseAPI}
 */
export class DosaAdminApi extends BaseAPI {
    /**
     * 
     * @summary 測定結果取得
     * @param {number} participantId 測定者ID
     * @param {number} meetId 測定会ID
     * @param {number} measurementId 測定結果ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public getMeasurement(participantId: number, meetId: number, measurementId: number, options?: any) {
        return DosaAdminApiFp(this.configuration).getMeasurement(participantId, meetId, measurementId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 測定会取得
     * @param {number} meetId 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public getMeasurementMeet(meetId: number, options?: any) {
        return DosaAdminApiFp(this.configuration).getMeasurementMeet(meetId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 申込み測定会一覧取得
     * @param {number} participantId 測定者ID
     * @param {number} [meetId] 測定会ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public getMeasurementMeetRequest(participantId: number, meetId?: number, options?: any) {
        return DosaAdminApiFp(this.configuration).getMeasurementMeetRequest(participantId, meetId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 測定会一覧取得
     * @param {1 | 2} [status] 測定会ステータス（1: 募集受付中, 2: 募集終了）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public getMeasurementMeets(status?: 1 | 2, options?: any) {
        return DosaAdminApiFp(this.configuration).getMeasurementMeets(status, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 測定者情報一覧取得
     * @param {string} [mailAddress] メールアドレス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public getParticipants(mailAddress?: string, options?: any) {
        return DosaAdminApiFp(this.configuration).getParticipants(mailAddress, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 参加測定会一覧取得
     * @param {number} participantId 測定者ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public getParticipatedMeasurementMeets(participantId: number, options?: any) {
        return DosaAdminApiFp(this.configuration).getParticipatedMeasurementMeets(participantId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary ランキング一覧取得
     * @param {1 | 2 | 3 | 4} [rankRange] 全国ランキングの範囲（1: 6〜8才、2: 9〜11才、3: 12〜14才, 4: 15〜）
     * @param {1 | 2} [sex] 性別（1:男性, 2:女性）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public getRankings(rankRange?: 1 | 2 | 3 | 4, sex?: 1 | 2, options?: any) {
        return DosaAdminApiFp(this.configuration).getRankings(rankRange, sex, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 測定会申込み
     * @param {number} meetId 測定会ID
     * @param {MeasurementMeetRequestData} [measurementMeetRequestData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public postMeasurementMeet(meetId: number, measurementMeetRequestData?: MeasurementMeetRequestData, options?: any) {
        return DosaAdminApiFp(this.configuration).postMeasurementMeet(meetId, measurementMeetRequestData, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary テストメール送信
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DosaAdminApi
     */
    public postSendTestMail(inlineObject?: InlineObject, options?: any) {
        return DosaAdminApiFp(this.configuration).postSendTestMail(inlineObject, options)(this.axios, this.basePath);
    }

}


